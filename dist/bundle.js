!function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t.w={},t(t.s=4)}([function(e,r){e.exports=require("path")},function(e,r){e.exports=require("fs")},function(e,r){e.exports=require("crypto")},function(e,r,t){var n,o=void 0!==o?o:{},i={};for(n in o)o.hasOwnProperty(n)&&(i[n]=o[n]);o.arguments=[],o.thisProgram="./this.program",o.quit=function(e,r){throw r},o.preRun=[],o.postRun=[];var a,s,u=!1,c=!1,l=!1,f=!1;if(o.ENVIRONMENT)if("WEB"===o.ENVIRONMENT)u=!0;else if("WORKER"===o.ENVIRONMENT)c=!0;else if("NODE"===o.ENVIRONMENT)l=!0;else{if("SHELL"!==o.ENVIRONMENT)throw new Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.");f=!0}else u="object"==typeof window,c="function"==typeof importScripts,l="object"==typeof process&&!u&&!c,f=!u&&!l&&!c;l?(o.read=function(e,r){var n;return a||(a=t(1)),s||(s=t(0)),e=s.normalize(e),n=a.readFileSync(e),r?n:n.toString()},o.readBinary=function(e){var r=o.read(e,!0);return r.buffer||(r=new Uint8Array(r)),_(r.buffer),r},process.argv.length>1&&(o.thisProgram=process.argv[1].replace(/\\/g,"/")),o.arguments=process.argv.slice(2),e.exports=o,process.on("uncaughtException",function(e){if(!(e instanceof Ot))throw e}),process.on("unhandledRejection",function(e,r){process.exit(1)}),o.inspect=function(){return"[Emscripten Module object]"}):f?("undefined"!=typeof read&&(o.read=function(e){return read(e)}),o.readBinary=function(e){var r;return"function"==typeof readbuffer?new Uint8Array(readbuffer(e)):(_("object"==typeof(r=read(e,"binary"))),r)},"undefined"!=typeof scriptArgs?o.arguments=scriptArgs:void 0!==arguments&&(o.arguments=arguments),"function"==typeof quit&&(o.quit=function(e,r){quit(e)})):(u||c)&&(o.read=function(e){var r=new XMLHttpRequest;return r.open("GET",e,!1),r.send(null),r.responseText},c&&(o.readBinary=function(e){var r=new XMLHttpRequest;return r.open("GET",e,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)}),o.readAsync=function(e,r,t){var n=new XMLHttpRequest;n.open("GET",e,!0),n.responseType="arraybuffer",n.onload=function(){200==n.status||0==n.status&&n.response?r(n.response):t()},n.onerror=t,n.send(null)},o.setWindowTitle=function(e){document.title=e});for(n in o.print="undefined"!=typeof console?console.log.bind(console):"undefined"!=typeof print?print:null,o.printErr="undefined"!=typeof printErr?printErr:"undefined"!=typeof console&&console.warn.bind(console)||o.print,o.print=o.print,o.printErr=o.printErr,i)i.hasOwnProperty(n)&&(o[n]=i[n]);i=void 0;var d=16;function p(e){_(!F);var r=L;return L=L+e+15&-16,r}function m(e,r){return r||(r=d),e=Math.ceil(e/r)*r}new Array(0);var h=0;function _(e,r){e||Pt("Assertion failed: "+r)}function y(e,r){if(0===r||!e)return"";for(var t,n=0,o=0;n|=t=D[e+o>>0],(0!=t||r)&&(o++,!r||o!=r););r||(r=o);var i="";if(n<128){for(var a;r>0;)a=String.fromCharCode.apply(String,D.subarray(e,e+Math.min(r,1024))),i=i?i+a:a,e+=1024,r-=1024;return i}return function(e){return v(D,e)}(e)}var E="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function v(e,r){for(var t=r;e[t];)++t;if(t-r>16&&e.subarray&&E)return E.decode(e.subarray(r,t));for(var n,o,i,a,s,u="";;){if(!(n=e[r++]))return u;if(128&n)if(o=63&e[r++],192!=(224&n))if(i=63&e[r++],224==(240&n)?n=(15&n)<<12|o<<6|i:(a=63&e[r++],240==(248&n)?n=(7&n)<<18|o<<12|i<<6|a:(s=63&e[r++],n=248==(252&n)?(3&n)<<24|o<<18|i<<12|a<<6|s:(1&n)<<30|o<<24|i<<18|a<<12|s<<6|63&e[r++])),n<65536)u+=String.fromCharCode(n);else{var c=n-65536;u+=String.fromCharCode(55296|c>>10,56320|1023&c)}else u+=String.fromCharCode((31&n)<<6|o);else u+=String.fromCharCode(n)}}function g(e,r,t,n){if(!(n>0))return 0;for(var o=t,i=t+n-1,a=0;a<e.length;++a){var s=e.charCodeAt(a);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++a)),s<=127){if(t>=i)break;r[t++]=s}else if(s<=2047){if(t+1>=i)break;r[t++]=192|s>>6,r[t++]=128|63&s}else if(s<=65535){if(t+2>=i)break;r[t++]=224|s>>12,r[t++]=128|s>>6&63,r[t++]=128|63&s}else if(s<=2097151){if(t+3>=i)break;r[t++]=240|s>>18,r[t++]=128|s>>12&63,r[t++]=128|s>>6&63,r[t++]=128|63&s}else if(s<=67108863){if(t+4>=i)break;r[t++]=248|s>>24,r[t++]=128|s>>18&63,r[t++]=128|s>>12&63,r[t++]=128|s>>6&63,r[t++]=128|63&s}else{if(t+5>=i)break;r[t++]=252|s>>30,r[t++]=128|s>>24&63,r[t++]=128|s>>18&63,r[t++]=128|s>>12&63,r[t++]=128|s>>6&63,r[t++]=128|63&s}}return r[t]=0,t-o}function w(e){for(var r=0,t=0;t<e.length;++t){var n=e.charCodeAt(t);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&e.charCodeAt(++t)),n<=127?++r:r+=n<=2047?2:n<=65535?3:n<=2097151?4:n<=67108863?5:6}return r}"undefined"!=typeof TextDecoder&&new TextDecoder("utf-16le");function b(e){var r=w(e)+1,t=Dt(r);return g(e,k,t,r),t}function T(){var e=function(){var e=new Error;if(!e.stack){try{throw new Error(0)}catch(r){e=r}if(!e.stack)return"(no stack trace available)"}return e.stack.toString()}();return o.extraStackTrace&&(e+="\n"+o.extraStackTrace()),e.replace(/__Z[\w\d_]+/g,function(e){var r=e;return e===r?e:e+" ["+r+"]"})}var A,k,D,O,S,N,P,C,I,L,F,M,R,B,x=65536,j=16777216;function $(){o.HEAP8=k=new Int8Array(A),o.HEAP16=O=new Int16Array(A),o.HEAP32=N=new Int32Array(A),o.HEAPU8=D=new Uint8Array(A),o.HEAPU16=S=new Uint16Array(A),o.HEAPU32=P=new Uint32Array(A),o.HEAPF32=C=new Float32Array(A),o.HEAPF64=I=new Float64Array(A)}function z(){Pt("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+G+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}L=M=0,F=!1;var W=o.TOTAL_STACK||5242880,G=o.TOTAL_MEMORY||16777216;if(G<W&&o.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+G+"! (TOTAL_STACK="+W+")"),o.buffer?A=o.buffer:("object"==typeof WebAssembly&&"function"==typeof WebAssembly.Memory?(o.wasmMemory=new WebAssembly.Memory({initial:G/x,maximum:G/x}),A=o.wasmMemory.buffer):A=new ArrayBuffer(G),o.buffer=A),$(),N[0]=1668509029,O[1]=25459,115!==D[2]||99!==D[3])throw"Runtime error: expected the system to be little-endian!";function U(e){for(;e.length>0;){var r=e.shift();if("function"!=typeof r){var t=r.func;"number"==typeof t?void 0===r.arg?o.dynCall_v(t):o.dynCall_vi(t,r.arg):t(void 0===r.arg?null:r.arg)}else r()}}var V=[],Y=[],H=[],q=[],X=[],K=!1;function Z(){K||(K=!0,U(Y))}function J(e,r,t){for(var n=0;n<e.length;++n)k[r++>>0]=e.charCodeAt(n);t||(k[r>>0]=0)}Math.abs,Math.cos,Math.sin,Math.tan,Math.acos,Math.asin,Math.atan,Math.atan2,Math.exp,Math.log,Math.sqrt,Math.ceil,Math.floor,Math.pow,Math.imul,Math.fround,Math.round,Math.min,Math.max,Math.clz32,Math.trunc;var Q=0,ee=null,re=null;function te(e){Q++,o.monitorRunDependencies&&o.monitorRunDependencies(Q)}function ne(e){if(Q--,o.monitorRunDependencies&&o.monitorRunDependencies(Q),0==Q&&(null!==ee&&(clearInterval(ee),ee=null),re)){var r=re;re=null,r()}}o.preloadedImages={},o.preloadedAudios={};var oe="data:application/octet-stream;base64,";function ie(e){return String.prototype.startsWith?e.startsWith(oe):0===e.indexOf(oe)}!function(){var e="libwist.wast",r="libwist.wasm",t="libwist.temp.asm.js";"function"==typeof o.locateFile&&(ie(e)||(e=o.locateFile(e)),ie(r)||(r=o.locateFile(r)),ie(t)||(t=o.locateFile(t)));var n={global:null,env:null,asm2wasm:{"f64-rem":function(e,r){return e%r},debugger:function(){}},parent:o},i=null;function a(e){var r=o.buffer;e.byteLength<r.byteLength&&o.printErr("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here");var t,n=new Int8Array(r);new Int8Array(e).set(n),t=e,o.buffer=A=t,$()}function s(){try{if(o.wasmBinary)return new Uint8Array(o.wasmBinary);if(o.readBinary)return o.readBinary(r);throw"on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)"}catch(e){Pt(e)}}function l(e,t,l){if("object"!=typeof WebAssembly)return o.printErr("no native wasm support detected"),!1;if(!(o.wasmMemory instanceof WebAssembly.Memory))return o.printErr("no native wasm Memory in use"),!1;function f(e,r){(i=e.exports).memory&&a(i.memory),o.asm=i,o.usingWasm=!0,ne()}if(t.memory=o.wasmMemory,n.global={NaN:NaN,Infinity:1/0},n["global.Math"]=Math,n.env=t,te(),o.instantiateWasm)try{return o.instantiateWasm(n,f)}catch(e){return o.printErr("Module.instantiateWasm callback failed with error: "+e),!1}function d(e){f(e.instance,e.module)}function p(e){(o.wasmBinary||!u&&!c||"function"!=typeof fetch?new Promise(function(e,r){e(s())}):fetch(r,{credentials:"same-origin"}).then(function(e){if(!e.ok)throw"failed to load wasm binary file at '"+r+"'";return e.arrayBuffer()}).catch(function(){return s()})).then(function(e){return WebAssembly.instantiate(e,n)}).then(e).catch(function(e){o.printErr("failed to asynchronously prepare wasm: "+e),Pt(e)})}return o.wasmBinary||"function"!=typeof WebAssembly.instantiateStreaming||ie(r)||"function"!=typeof fetch?p(d):WebAssembly.instantiateStreaming(fetch(r,{credentials:"same-origin"}),n).then(d).catch(function(e){o.printErr("wasm streaming compile failed: "+e),o.printErr("falling back to ArrayBuffer instantiation"),p(d)}),{}}o.asmPreload=o.asm;var f=o.reallocBuffer;o.reallocBuffer=function(e){return"asmjs"===d?f(e):function(e){var r,t,n=o.usingWasm?x:j;(r=e)%(t=n)>0&&(r+=t-r%t),e=r;var i=o.buffer.byteLength;if(o.usingWasm)try{return-1!==o.wasmMemory.grow((e-i)/65536)?o.buffer=o.wasmMemory.buffer:null}catch(e){return null}}(e)};var d="";o.asm=function(e,r,t){var n;if(!(r=r).table){var i=o.wasmTableSize;void 0===i&&(i=1024);var a=o.wasmMaxTableSize;"object"==typeof WebAssembly&&"function"==typeof WebAssembly.Table?r.table=void 0!==a?new WebAssembly.Table({initial:i,maximum:a,element:"anyfunc"}):new WebAssembly.Table({initial:i,element:"anyfunc"}):r.table=new Array(i),o.wasmTable=r.table}return r.memoryBase||(r.memoryBase=o.STATIC_BASE),r.tableBase||(r.tableBase=0),_(n=l(0,r),"no binaryen method succeeded."),n}}();var ae=[function(){we.mkdir("/working"),we.mount(ve,{root:"."},"/working")}];L=117296,Y.push({func:function(){Kr()}},{func:function(){Jr()}},{func:function(){gt()}},{func:function(){vt()}},{func:function(){yt()}},{func:function(){Et()}},{func:function(){nt()}},{func:function(){ut()}},{func:function(){st()}},{func:function(){at()}},{func:function(){ct()}},{func:function(){mt()}},{func:function(){dt()}},{func:function(){tt()}},{func:function(){Zr()}},{func:function(){Qr()}},{func:function(){ht()}},{func:function(){_t()}},{func:function(){it()}},{func:function(){ft()}},{func:function(){ot()}},{func:function(){pt()}},{func:function(){lt()}},{func:function(){rt()}},{func:function(){et()}},{func:function(){wt()}});function se(){return!!se.uncaught_exception}o.STATIC_BASE=1024,o.STATIC_BUMP=116272,L+=16;var ue={last:0,caught:[],infos:{},deAdjust:function(e){if(!e||ue.infos[e])return e;for(var r in ue.infos){var t=+r;if(ue.infos[t].adjusted===e)return t}return e},addRef:function(e){e&&ue.infos[e].refcount++},decRef:function(e){if(e){var r=ue.infos[e];_(r.refcount>0),r.refcount--,0!==r.refcount||r.rethrown||(r.destructor&&o.dynCall_vi(r.destructor,e),delete ue.infos[e],ce(e))}},clearRef:function(e){e&&(ue.infos[e].refcount=0)}};function ce(e){try{return Tt(e)}catch(e){}}function le(){var e=ue.caught.pop();throw e=ue.deAdjust(e),ue.infos[e].rethrown||(ue.caught.push(e),ue.infos[e].rethrown=!0),ue.last=e,e}function fe(){var e=ue.last;if(!e)return 0|(kt(0),0);var r=ue.infos[e],t=r.type;if(!t)return 0|(kt(0),e);var n=Array.prototype.slice.call(arguments);o.___cxa_is_pointer_type(t);fe.buffer||(fe.buffer=At(4)),N[fe.buffer>>2]=e,e=fe.buffer;for(var i=0;i<n.length;i++)if(n[i]&&o.___cxa_can_catch(n[i],t,e))return e=N[e>>2],r.adjusted=e,0|(kt(n[i]),e);return e=N[e>>2],0|(kt(t),e)}var de={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function pe(e){return o.___errno_location&&(N[o.___errno_location()>>2]=e),e}var me={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"},he={splitPath:function(e){return/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(e).slice(1)},normalizeArray:function(e,r){for(var t=0,n=e.length-1;n>=0;n--){var o=e[n];"."===o?e.splice(n,1):".."===o?(e.splice(n,1),t++):t&&(e.splice(n,1),t--)}if(r)for(;t;t--)e.unshift("..");return e},normalize:function(e){var r="/"===e.charAt(0),t="/"===e.substr(-1);return(e=he.normalizeArray(e.split("/").filter(function(e){return!!e}),!r).join("/"))||r||(e="."),e&&t&&(e+="/"),(r?"/":"")+e},dirname:function(e){var r=he.splitPath(e),t=r[0],n=r[1];return t||n?(n&&(n=n.substr(0,n.length-1)),t+n):"."},basename:function(e){if("/"===e)return"/";var r=e.lastIndexOf("/");return-1===r?e:e.substr(r+1)},extname:function(e){return he.splitPath(e)[3]},join:function(){var e=Array.prototype.slice.call(arguments,0);return he.normalize(e.join("/"))},join2:function(e,r){return he.normalize(e+"/"+r)},resolve:function(){for(var e="",r=!1,t=arguments.length-1;t>=-1&&!r;t--){var n=t>=0?arguments[t]:we.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");if(!n)return"";e=n+"/"+e,r="/"===n.charAt(0)}return e=he.normalizeArray(e.split("/").filter(function(e){return!!e}),!r).join("/"),(r?"/":"")+e||"."},relative:function(e,r){function t(e){for(var r=0;r<e.length&&""===e[r];r++);for(var t=e.length-1;t>=0&&""===e[t];t--);return r>t?[]:e.slice(r,t-r+1)}e=he.resolve(e).substr(1),r=he.resolve(r).substr(1);for(var n=t(e.split("/")),o=t(r.split("/")),i=Math.min(n.length,o.length),a=i,s=0;s<i;s++)if(n[s]!==o[s]){a=s;break}var u=[];for(s=a;s<n.length;s++)u.push("..");return(u=u.concat(o.slice(a))).join("/")}},_e={ttys:[],init:function(){},shutdown:function(){},register:function(e,r){_e.ttys[e]={input:[],output:[],ops:r},we.registerDevice(e,_e.stream_ops)},stream_ops:{open:function(e){var r=_e.ttys[e.node.rdev];if(!r)throw new we.ErrnoError(de.ENODEV);e.tty=r,e.seekable=!1},close:function(e){e.tty.ops.flush(e.tty)},flush:function(e){e.tty.ops.flush(e.tty)},read:function(e,r,t,n,o){if(!e.tty||!e.tty.ops.get_char)throw new we.ErrnoError(de.ENXIO);for(var i=0,a=0;a<n;a++){var s;try{s=e.tty.ops.get_char(e.tty)}catch(e){throw new we.ErrnoError(de.EIO)}if(void 0===s&&0===i)throw new we.ErrnoError(de.EAGAIN);if(null===s||void 0===s)break;i++,r[t+a]=s}return i&&(e.node.timestamp=Date.now()),i},write:function(e,r,t,n,o){if(!e.tty||!e.tty.ops.put_char)throw new we.ErrnoError(de.ENXIO);for(var i=0;i<n;i++)try{e.tty.ops.put_char(e.tty,r[t+i])}catch(e){throw new we.ErrnoError(de.EIO)}return n&&(e.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(e){if(!e.input.length){var r=null;if(l){var t=new Buffer(256),n=0,o="win32"!=process.platform,i=process.stdin.fd;if(o){var a=!1;try{i=Vr.openSync("/dev/stdin","r"),a=!0}catch(e){}}try{n=Vr.readSync(i,t,0,256,null)}catch(e){if(-1==e.toString().indexOf("EOF"))throw e;n=0}a&&Vr.closeSync(i),r=n>0?t.slice(0,n).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(r=window.prompt("Input: "))&&(r+="\n"):"function"==typeof readline&&null!==(r=readline())&&(r+="\n");if(!r)return null;e.input=Hr(r,!0)}return e.input.shift()},put_char:function(e,r){null===r||10===r?(o.print(v(e.output,0)),e.output=[]):0!=r&&e.output.push(r)},flush:function(e){e.output&&e.output.length>0&&(o.print(v(e.output,0)),e.output=[])}},default_tty1_ops:{put_char:function(e,r){null===r||10===r?(o.printErr(v(e.output,0)),e.output=[]):0!=r&&e.output.push(r)},flush:function(e){e.output&&e.output.length>0&&(o.printErr(v(e.output,0)),e.output=[])}}},ye={ops_table:null,mount:function(e){return ye.createNode(null,"/",16895,0)},createNode:function(e,r,t,n){if(we.isBlkdev(t)||we.isFIFO(t))throw new we.ErrnoError(de.EPERM);ye.ops_table||(ye.ops_table={dir:{node:{getattr:ye.node_ops.getattr,setattr:ye.node_ops.setattr,lookup:ye.node_ops.lookup,mknod:ye.node_ops.mknod,rename:ye.node_ops.rename,unlink:ye.node_ops.unlink,rmdir:ye.node_ops.rmdir,readdir:ye.node_ops.readdir,symlink:ye.node_ops.symlink},stream:{llseek:ye.stream_ops.llseek}},file:{node:{getattr:ye.node_ops.getattr,setattr:ye.node_ops.setattr},stream:{llseek:ye.stream_ops.llseek,read:ye.stream_ops.read,write:ye.stream_ops.write,allocate:ye.stream_ops.allocate,mmap:ye.stream_ops.mmap,msync:ye.stream_ops.msync}},link:{node:{getattr:ye.node_ops.getattr,setattr:ye.node_ops.setattr,readlink:ye.node_ops.readlink},stream:{}},chrdev:{node:{getattr:ye.node_ops.getattr,setattr:ye.node_ops.setattr},stream:we.chrdev_stream_ops}});var o=we.createNode(e,r,t,n);return we.isDir(o.mode)?(o.node_ops=ye.ops_table.dir.node,o.stream_ops=ye.ops_table.dir.stream,o.contents={}):we.isFile(o.mode)?(o.node_ops=ye.ops_table.file.node,o.stream_ops=ye.ops_table.file.stream,o.usedBytes=0,o.contents=null):we.isLink(o.mode)?(o.node_ops=ye.ops_table.link.node,o.stream_ops=ye.ops_table.link.stream):we.isChrdev(o.mode)&&(o.node_ops=ye.ops_table.chrdev.node,o.stream_ops=ye.ops_table.chrdev.stream),o.timestamp=Date.now(),e&&(e.contents[r]=o),o},getFileDataAsRegularArray:function(e){if(e.contents&&e.contents.subarray){for(var r=[],t=0;t<e.usedBytes;++t)r.push(e.contents[t]);return r}return e.contents},getFileDataAsTypedArray:function(e){return e.contents?e.contents.subarray?e.contents.subarray(0,e.usedBytes):new Uint8Array(e.contents):new Uint8Array},expandFileStorage:function(e,r){if(e.contents&&e.contents.subarray&&r>e.contents.length&&(e.contents=ye.getFileDataAsRegularArray(e),e.usedBytes=e.contents.length),!e.contents||e.contents.subarray){var t=e.contents?e.contents.length:0;if(t>=r)return;r=Math.max(r,t*(t<1048576?2:1.125)|0),0!=t&&(r=Math.max(r,256));var n=e.contents;return e.contents=new Uint8Array(r),void(e.usedBytes>0&&e.contents.set(n.subarray(0,e.usedBytes),0))}for(!e.contents&&r>0&&(e.contents=[]);e.contents.length<r;)e.contents.push(0)},resizeFileStorage:function(e,r){if(e.usedBytes!=r){if(0==r)return e.contents=null,void(e.usedBytes=0);if(!e.contents||e.contents.subarray){var t=e.contents;return e.contents=new Uint8Array(new ArrayBuffer(r)),t&&e.contents.set(t.subarray(0,Math.min(r,e.usedBytes))),void(e.usedBytes=r)}if(e.contents||(e.contents=[]),e.contents.length>r)e.contents.length=r;else for(;e.contents.length<r;)e.contents.push(0);e.usedBytes=r}},node_ops:{getattr:function(e){var r={};return r.dev=we.isChrdev(e.mode)?e.id:1,r.ino=e.id,r.mode=e.mode,r.nlink=1,r.uid=0,r.gid=0,r.rdev=e.rdev,we.isDir(e.mode)?r.size=4096:we.isFile(e.mode)?r.size=e.usedBytes:we.isLink(e.mode)?r.size=e.link.length:r.size=0,r.atime=new Date(e.timestamp),r.mtime=new Date(e.timestamp),r.ctime=new Date(e.timestamp),r.blksize=4096,r.blocks=Math.ceil(r.size/r.blksize),r},setattr:function(e,r){void 0!==r.mode&&(e.mode=r.mode),void 0!==r.timestamp&&(e.timestamp=r.timestamp),void 0!==r.size&&ye.resizeFileStorage(e,r.size)},lookup:function(e,r){throw we.genericErrors[de.ENOENT]},mknod:function(e,r,t,n){return ye.createNode(e,r,t,n)},rename:function(e,r,t){if(we.isDir(e.mode)){var n;try{n=we.lookupNode(r,t)}catch(e){}if(n)for(var o in n.contents)throw new we.ErrnoError(de.ENOTEMPTY)}delete e.parent.contents[e.name],e.name=t,r.contents[t]=e,e.parent=r},unlink:function(e,r){delete e.contents[r]},rmdir:function(e,r){var t=we.lookupNode(e,r);for(var n in t.contents)throw new we.ErrnoError(de.ENOTEMPTY);delete e.contents[r]},readdir:function(e){var r=[".",".."];for(var t in e.contents)e.contents.hasOwnProperty(t)&&r.push(t);return r},symlink:function(e,r,t){var n=ye.createNode(e,r,41471,0);return n.link=t,n},readlink:function(e){if(!we.isLink(e.mode))throw new we.ErrnoError(de.EINVAL);return e.link}},stream_ops:{read:function(e,r,t,n,o){var i=e.node.contents;if(o>=e.node.usedBytes)return 0;var a=Math.min(e.node.usedBytes-o,n);if(_(a>=0),a>8&&i.subarray)r.set(i.subarray(o,o+a),t);else for(var s=0;s<a;s++)r[t+s]=i[o+s];return a},write:function(e,r,t,n,o,i){if(!n)return 0;var a=e.node;if(a.timestamp=Date.now(),r.subarray&&(!a.contents||a.contents.subarray)){if(i)return a.contents=r.subarray(t,t+n),a.usedBytes=n,n;if(0===a.usedBytes&&0===o)return a.contents=new Uint8Array(r.subarray(t,t+n)),a.usedBytes=n,n;if(o+n<=a.usedBytes)return a.contents.set(r.subarray(t,t+n),o),n}if(ye.expandFileStorage(a,o+n),a.contents.subarray&&r.subarray)a.contents.set(r.subarray(t,t+n),o);else for(var s=0;s<n;s++)a.contents[o+s]=r[t+s];return a.usedBytes=Math.max(a.usedBytes,o+n),n},llseek:function(e,r,t){var n=r;if(1===t?n+=e.position:2===t&&we.isFile(e.node.mode)&&(n+=e.node.usedBytes),n<0)throw new we.ErrnoError(de.EINVAL);return n},allocate:function(e,r,t){ye.expandFileStorage(e.node,r+t),e.node.usedBytes=Math.max(e.node.usedBytes,r+t)},mmap:function(e,r,t,n,o,i,a){if(!we.isFile(e.node.mode))throw new we.ErrnoError(de.ENODEV);var s,u,c=e.node.contents;if(2&a||c.buffer!==r&&c.buffer!==r.buffer){if((o>0||o+n<e.node.usedBytes)&&(c=c.subarray?c.subarray(o,o+n):Array.prototype.slice.call(c,o,o+n)),u=!0,!(s=At(n)))throw new we.ErrnoError(de.ENOMEM);r.set(c,s)}else u=!1,s=c.byteOffset;return{ptr:s,allocated:u}},msync:function(e,r,t,n,o){if(!we.isFile(e.node.mode))throw new we.ErrnoError(de.ENODEV);if(2&o)return 0;ye.stream_ops.write(e,r,0,n,t,!1);return 0}}},Ee={dbs:{},indexedDB:function(){if("undefined"!=typeof indexedDB)return indexedDB;var e=null;return"object"==typeof window&&(e=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB),_(e,"IDBFS used, but indexedDB not supported"),e},DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(e){return ye.mount.apply(null,arguments)},syncfs:function(e,r,t){Ee.getLocalSet(e,function(n,o){if(n)return t(n);Ee.getRemoteSet(e,function(e,n){if(e)return t(e);var i=r?n:o,a=r?o:n;Ee.reconcile(i,a,t)})})},getDB:function(e,r){var t,n=Ee.dbs[e];if(n)return r(null,n);try{t=Ee.indexedDB().open(e,Ee.DB_VERSION)}catch(e){return r(e)}if(!t)return r("Unable to connect to IndexedDB");t.onupgradeneeded=function(e){var r,t=e.target.result,n=e.target.transaction;(r=t.objectStoreNames.contains(Ee.DB_STORE_NAME)?n.objectStore(Ee.DB_STORE_NAME):t.createObjectStore(Ee.DB_STORE_NAME)).indexNames.contains("timestamp")||r.createIndex("timestamp","timestamp",{unique:!1})},t.onsuccess=function(){n=t.result,Ee.dbs[e]=n,r(null,n)},t.onerror=function(e){r(this.error),e.preventDefault()}},getLocalSet:function(e,r){var t={};function n(e){return"."!==e&&".."!==e}function o(e){return function(r){return he.join2(e,r)}}for(var i=we.readdir(e.mountpoint).filter(n).map(o(e.mountpoint));i.length;){var a,s=i.pop();try{a=we.stat(s)}catch(e){return r(e)}we.isDir(a.mode)&&i.push.apply(i,we.readdir(s).filter(n).map(o(s))),t[s]={timestamp:a.mtime}}return r(null,{type:"local",entries:t})},getRemoteSet:function(e,r){var t={};Ee.getDB(e.mountpoint,function(e,n){if(e)return r(e);try{var o=n.transaction([Ee.DB_STORE_NAME],"readonly");o.onerror=function(e){r(this.error),e.preventDefault()},o.objectStore(Ee.DB_STORE_NAME).index("timestamp").openKeyCursor().onsuccess=function(e){var o=e.target.result;if(!o)return r(null,{type:"remote",db:n,entries:t});t[o.primaryKey]={timestamp:o.key},o.continue()}}catch(e){return r(e)}})},loadLocalEntry:function(e,r){var t,n;try{n=we.lookupPath(e).node,t=we.stat(e)}catch(e){return r(e)}return we.isDir(t.mode)?r(null,{timestamp:t.mtime,mode:t.mode}):we.isFile(t.mode)?(n.contents=ye.getFileDataAsTypedArray(n),r(null,{timestamp:t.mtime,mode:t.mode,contents:n.contents})):r(new Error("node type not supported"))},storeLocalEntry:function(e,r,t){try{if(we.isDir(r.mode))we.mkdir(e,r.mode);else{if(!we.isFile(r.mode))return t(new Error("node type not supported"));we.writeFile(e,r.contents,{canOwn:!0})}we.chmod(e,r.mode),we.utime(e,r.timestamp,r.timestamp)}catch(e){return t(e)}t(null)},removeLocalEntry:function(e,r){try{we.lookupPath(e);var t=we.stat(e);we.isDir(t.mode)?we.rmdir(e):we.isFile(t.mode)&&we.unlink(e)}catch(e){return r(e)}r(null)},loadRemoteEntry:function(e,r,t){var n=e.get(r);n.onsuccess=function(e){t(null,e.target.result)},n.onerror=function(e){t(this.error),e.preventDefault()}},storeRemoteEntry:function(e,r,t,n){var o=e.put(t,r);o.onsuccess=function(){n(null)},o.onerror=function(e){n(this.error),e.preventDefault()}},removeRemoteEntry:function(e,r,t){var n=e.delete(r);n.onsuccess=function(){t(null)},n.onerror=function(e){t(this.error),e.preventDefault()}},reconcile:function(e,r,t){var n=0,o=[];Object.keys(e.entries).forEach(function(t){var i=e.entries[t],a=r.entries[t];(!a||i.timestamp>a.timestamp)&&(o.push(t),n++)});var i=[];if(Object.keys(r.entries).forEach(function(t){r.entries[t];e.entries[t]||(i.push(t),n++)}),!n)return t(null);var a=0,s=("remote"===e.type?e.db:r.db).transaction([Ee.DB_STORE_NAME],"readwrite"),u=s.objectStore(Ee.DB_STORE_NAME);function c(e){return e?c.errored?void 0:(c.errored=!0,t(e)):++a>=n?t(null):void 0}s.onerror=function(e){c(this.error),e.preventDefault()},o.sort().forEach(function(e){"local"===r.type?Ee.loadRemoteEntry(u,e,function(r,t){if(r)return c(r);Ee.storeLocalEntry(e,t,c)}):Ee.loadLocalEntry(e,function(r,t){if(r)return c(r);Ee.storeRemoteEntry(u,e,t,c)})}),i.sort().reverse().forEach(function(e){"local"===r.type?Ee.removeLocalEntry(e,c):Ee.removeRemoteEntry(u,e,c)})}},ve={isWindows:!1,staticInit:function(){ve.isWindows=!!process.platform.match(/^win/);var e=process.binding("constants");e.fs&&(e=e.fs),ve.flagsForNodeMap={1024:e.O_APPEND,64:e.O_CREAT,128:e.O_EXCL,0:e.O_RDONLY,2:e.O_RDWR,4096:e.O_SYNC,512:e.O_TRUNC,1:e.O_WRONLY}},bufferFrom:function(e){return Buffer.alloc?Buffer.from(e):new Buffer(e)},mount:function(e){return _(l),ve.createNode(null,"/",ve.getMode(e.opts.root),0)},createNode:function(e,r,t,n){if(!we.isDir(t)&&!we.isFile(t)&&!we.isLink(t))throw new we.ErrnoError(de.EINVAL);var o=we.createNode(e,r,t);return o.node_ops=ve.node_ops,o.stream_ops=ve.stream_ops,o},getMode:function(e){var r;try{r=Vr.lstatSync(e),ve.isWindows&&(r.mode=r.mode|(292&r.mode)>>2)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}return r.mode},realPath:function(e){for(var r=[];e.parent!==e;)r.push(e.name),e=e.parent;return r.push(e.mount.opts.root),r.reverse(),he.join.apply(null,r)},flagsForNode:function(e){e&=-2097153,e&=-2049,e&=-32769,e&=-524289;var r=0;for(var t in ve.flagsForNodeMap)e&t&&(r|=ve.flagsForNodeMap[t],e^=t);if(e)throw new we.ErrnoError(de.EINVAL);return r},node_ops:{getattr:function(e){var r,t=ve.realPath(e);try{r=Vr.lstatSync(t)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}return ve.isWindows&&!r.blksize&&(r.blksize=4096),ve.isWindows&&!r.blocks&&(r.blocks=(r.size+r.blksize-1)/r.blksize|0),{dev:r.dev,ino:r.ino,mode:r.mode,nlink:r.nlink,uid:r.uid,gid:r.gid,rdev:r.rdev,size:r.size,atime:r.atime,mtime:r.mtime,ctime:r.ctime,blksize:r.blksize,blocks:r.blocks}},setattr:function(e,r){var t=ve.realPath(e);try{if(void 0!==r.mode&&(Vr.chmodSync(t,r.mode),e.mode=r.mode),void 0!==r.timestamp){var n=new Date(r.timestamp);Vr.utimesSync(t,n,n)}void 0!==r.size&&Vr.truncateSync(t,r.size)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}},lookup:function(e,r){var t=he.join2(ve.realPath(e),r),n=ve.getMode(t);return ve.createNode(e,r,n)},mknod:function(e,r,t,n){var o=ve.createNode(e,r,t,n),i=ve.realPath(o);try{we.isDir(o.mode)?Vr.mkdirSync(i,o.mode):Vr.writeFileSync(i,"",{mode:o.mode})}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}return o},rename:function(e,r,t){var n=ve.realPath(e),o=he.join2(ve.realPath(r),t);try{Vr.renameSync(n,o)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}},unlink:function(e,r){var t=he.join2(ve.realPath(e),r);try{Vr.unlinkSync(t)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}},rmdir:function(e,r){var t=he.join2(ve.realPath(e),r);try{Vr.rmdirSync(t)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}},readdir:function(e){var r=ve.realPath(e);try{return Vr.readdirSync(r)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}},symlink:function(e,r,t){var n=he.join2(ve.realPath(e),r);try{Vr.symlinkSync(t,n)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}},readlink:function(e){var r=ve.realPath(e);try{return r=Vr.readlinkSync(r),r=Yr.relative(Yr.resolve(e.mount.opts.root),r)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}}},stream_ops:{open:function(e){var r=ve.realPath(e.node);try{we.isFile(e.node.mode)&&(e.nfd=Vr.openSync(r,ve.flagsForNode(e.flags)))}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}},close:function(e){try{we.isFile(e.node.mode)&&e.nfd&&Vr.closeSync(e.nfd)}catch(e){if(!e.code)throw e;throw new we.ErrnoError(de[e.code])}},read:function(e,r,t,n,o){if(0===n)return 0;try{return Vr.readSync(e.nfd,ve.bufferFrom(r.buffer),t,n,o)}catch(e){throw new we.ErrnoError(de[e.code])}},write:function(e,r,t,n,o){try{return Vr.writeSync(e.nfd,ve.bufferFrom(r.buffer),t,n,o)}catch(e){throw new we.ErrnoError(de[e.code])}},llseek:function(e,r,t){var n=r;if(1===t)n+=e.position;else if(2===t&&we.isFile(e.node.mode))try{n+=Vr.fstatSync(e.nfd).size}catch(e){throw new we.ErrnoError(de[e.code])}if(n<0)throw new we.ErrnoError(de.EINVAL);return n}}},ge={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function(e){_(c),ge.reader||(ge.reader=new FileReaderSync);var r=ge.createNode(null,"/",ge.DIR_MODE,0),t={};function n(e){for(var n=e.split("/"),o=r,i=0;i<n.length-1;i++){var a=n.slice(0,i+1).join("/");t[a]||(t[a]=ge.createNode(o,n[i],ge.DIR_MODE,0)),o=t[a]}return o}function o(e){var r=e.split("/");return r[r.length-1]}return Array.prototype.forEach.call(e.opts.files||[],function(e){ge.createNode(n(e.name),o(e.name),ge.FILE_MODE,0,e,e.lastModifiedDate)}),(e.opts.blobs||[]).forEach(function(e){ge.createNode(n(e.name),o(e.name),ge.FILE_MODE,0,e.data)}),(e.opts.packages||[]).forEach(function(e){e.metadata.files.forEach(function(r){var t=r.filename.substr(1);ge.createNode(n(t),o(t),ge.FILE_MODE,0,e.blob.slice(r.start,r.end))})}),r},createNode:function(e,r,t,n,o,i){var a=we.createNode(e,r,t);return a.mode=t,a.node_ops=ge.node_ops,a.stream_ops=ge.stream_ops,a.timestamp=(i||new Date).getTime(),_(ge.FILE_MODE!==ge.DIR_MODE),t===ge.FILE_MODE?(a.size=o.size,a.contents=o):(a.size=4096,a.contents={}),e&&(e.contents[r]=a),a},node_ops:{getattr:function(e){return{dev:1,ino:void 0,mode:e.mode,nlink:1,uid:0,gid:0,rdev:void 0,size:e.size,atime:new Date(e.timestamp),mtime:new Date(e.timestamp),ctime:new Date(e.timestamp),blksize:4096,blocks:Math.ceil(e.size/4096)}},setattr:function(e,r){void 0!==r.mode&&(e.mode=r.mode),void 0!==r.timestamp&&(e.timestamp=r.timestamp)},lookup:function(e,r){throw new we.ErrnoError(de.ENOENT)},mknod:function(e,r,t,n){throw new we.ErrnoError(de.EPERM)},rename:function(e,r,t){throw new we.ErrnoError(de.EPERM)},unlink:function(e,r){throw new we.ErrnoError(de.EPERM)},rmdir:function(e,r){throw new we.ErrnoError(de.EPERM)},readdir:function(e){var r=[".",".."];for(var t in e.contents)e.contents.hasOwnProperty(t)&&r.push(t);return r},symlink:function(e,r,t){throw new we.ErrnoError(de.EPERM)},readlink:function(e){throw new we.ErrnoError(de.EPERM)}},stream_ops:{read:function(e,r,t,n,o){if(o>=e.node.size)return 0;var i=e.node.contents.slice(o,o+n),a=ge.reader.readAsArrayBuffer(i);return r.set(new Uint8Array(a),t),i.size},write:function(e,r,t,n,o){throw new we.ErrnoError(de.EIO)},llseek:function(e,r,t){var n=r;if(1===t?n+=e.position:2===t&&we.isFile(e.node.mode)&&(n+=e.node.size),n<0)throw new we.ErrnoError(de.EINVAL);return n}}};L+=16,L+=16;var we={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof we.ErrnoError))throw e+" : "+T();return pe(e.errno)},lookupPath:function(e,r){if(e=he.resolve(we.cwd(),e),r=r||{},!e)return{path:"",node:null};var t={follow_mount:!0,recurse_count:0};for(var n in t)void 0===r[n]&&(r[n]=t[n]);if(r.recurse_count>8)throw new we.ErrnoError(de.ELOOP);for(var o=he.normalizeArray(e.split("/").filter(function(e){return!!e}),!1),i=we.root,a="/",s=0;s<o.length;s++){var u=s===o.length-1;if(u&&r.parent)break;if(i=we.lookupNode(i,o[s]),a=he.join2(a,o[s]),we.isMountpoint(i)&&(!u||u&&r.follow_mount)&&(i=i.mounted.root),!u||r.follow)for(var c=0;we.isLink(i.mode);){var l=we.readlink(a);if(a=he.resolve(he.dirname(a),l),i=we.lookupPath(a,{recurse_count:r.recurse_count}).node,c++>40)throw new we.ErrnoError(de.ELOOP)}}return{path:a,node:i}},getPath:function(e){for(var r;;){if(we.isRoot(e)){var t=e.mount.mountpoint;return r?"/"!==t[t.length-1]?t+"/"+r:t+r:t}r=r?e.name+"/"+r:e.name,e=e.parent}},hashName:function(e,r){for(var t=0,n=0;n<r.length;n++)t=(t<<5)-t+r.charCodeAt(n)|0;return(e+t>>>0)%we.nameTable.length},hashAddNode:function(e){var r=we.hashName(e.parent.id,e.name);e.name_next=we.nameTable[r],we.nameTable[r]=e},hashRemoveNode:function(e){var r=we.hashName(e.parent.id,e.name);if(we.nameTable[r]===e)we.nameTable[r]=e.name_next;else for(var t=we.nameTable[r];t;){if(t.name_next===e){t.name_next=e.name_next;break}t=t.name_next}},lookupNode:function(e,r){var t=we.mayLookup(e);if(t)throw new we.ErrnoError(t,e);for(var n=we.hashName(e.id,r),o=we.nameTable[n];o;o=o.name_next){var i=o.name;if(o.parent.id===e.id&&i===r)return o}return we.lookup(e,r)},createNode:function(e,r,t,n){if(!we.FSNode){we.FSNode=function(e,r,t,n){e||(e=this),this.parent=e,this.mount=e.mount,this.mounted=null,this.id=we.nextInode++,this.name=r,this.mode=t,this.node_ops={},this.stream_ops={},this.rdev=n},we.FSNode.prototype={};Object.defineProperties(we.FSNode.prototype,{read:{get:function(){return 365==(365&this.mode)},set:function(e){e?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146==(146&this.mode)},set:function(e){e?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return we.isDir(this.mode)}},isDevice:{get:function(){return we.isChrdev(this.mode)}}})}var o=new we.FSNode(e,r,t,n);return we.hashAddNode(o),o},destroyNode:function(e){we.hashRemoveNode(e)},isRoot:function(e){return e===e.parent},isMountpoint:function(e){return!!e.mounted},isFile:function(e){return 32768==(61440&e)},isDir:function(e){return 16384==(61440&e)},isLink:function(e){return 40960==(61440&e)},isChrdev:function(e){return 8192==(61440&e)},isBlkdev:function(e){return 24576==(61440&e)},isFIFO:function(e){return 4096==(61440&e)},isSocket:function(e){return 49152==(49152&e)},flagModes:{r:0,rs:1052672,"r+":2,w:577,wx:705,xw:705,"w+":578,"wx+":706,"xw+":706,a:1089,ax:1217,xa:1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(e){var r=we.flagModes[e];if(void 0===r)throw new Error("Unknown file open mode: "+e);return r},flagsToPermissionString:function(e){var r=["r","w","rw"][3&e];return 512&e&&(r+="w"),r},nodePermissions:function(e,r){return we.ignorePermissions?0:(-1===r.indexOf("r")||292&e.mode)&&(-1===r.indexOf("w")||146&e.mode)&&(-1===r.indexOf("x")||73&e.mode)?0:de.EACCES},mayLookup:function(e){var r=we.nodePermissions(e,"x");return r||(e.node_ops.lookup?0:de.EACCES)},mayCreate:function(e,r){try{we.lookupNode(e,r);return de.EEXIST}catch(e){}return we.nodePermissions(e,"wx")},mayDelete:function(e,r,t){var n;try{n=we.lookupNode(e,r)}catch(e){return e.errno}var o=we.nodePermissions(e,"wx");if(o)return o;if(t){if(!we.isDir(n.mode))return de.ENOTDIR;if(we.isRoot(n)||we.getPath(n)===we.cwd())return de.EBUSY}else if(we.isDir(n.mode))return de.EISDIR;return 0},mayOpen:function(e,r){return e?we.isLink(e.mode)?de.ELOOP:we.isDir(e.mode)&&("r"!==we.flagsToPermissionString(r)||512&r)?de.EISDIR:we.nodePermissions(e,we.flagsToPermissionString(r)):de.ENOENT},MAX_OPEN_FDS:4096,nextfd:function(e,r){e=e||0,r=r||we.MAX_OPEN_FDS;for(var t=e;t<=r;t++)if(!we.streams[t])return t;throw new we.ErrnoError(de.EMFILE)},getStream:function(e){return we.streams[e]},createStream:function(e,r,t){we.FSStream||(we.FSStream=function(){},we.FSStream.prototype={},Object.defineProperties(we.FSStream.prototype,{object:{get:function(){return this.node},set:function(e){this.node=e}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}}}));var n=new we.FSStream;for(var o in e)n[o]=e[o];e=n;var i=we.nextfd(r,t);return e.fd=i,we.streams[i]=e,e},closeStream:function(e){we.streams[e]=null},chrdev_stream_ops:{open:function(e){var r=we.getDevice(e.node.rdev);e.stream_ops=r.stream_ops,e.stream_ops.open&&e.stream_ops.open(e)},llseek:function(){throw new we.ErrnoError(de.ESPIPE)}},major:function(e){return e>>8},minor:function(e){return 255&e},makedev:function(e,r){return e<<8|r},registerDevice:function(e,r){we.devices[e]={stream_ops:r}},getDevice:function(e){return we.devices[e]},getMounts:function(e){for(var r=[],t=[e];t.length;){var n=t.pop();r.push(n),t.push.apply(t,n.mounts)}return r},syncfs:function(e,r){"function"==typeof e&&(r=e,e=!1),we.syncFSRequests++,we.syncFSRequests>1&&console.log("warning: "+we.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var t=we.getMounts(we.root.mount),n=0;function o(e){return _(we.syncFSRequests>0),we.syncFSRequests--,r(e)}function i(e){if(e)return i.errored?void 0:(i.errored=!0,o(e));++n>=t.length&&o(null)}t.forEach(function(r){if(!r.type.syncfs)return i(null);r.type.syncfs(r,e,i)})},mount:function(e,r,t){var n,o="/"===t,i=!t;if(o&&we.root)throw new we.ErrnoError(de.EBUSY);if(!o&&!i){var a=we.lookupPath(t,{follow_mount:!1});if(t=a.path,n=a.node,we.isMountpoint(n))throw new we.ErrnoError(de.EBUSY);if(!we.isDir(n.mode))throw new we.ErrnoError(de.ENOTDIR)}var s={type:e,opts:r,mountpoint:t,mounts:[]},u=e.mount(s);return u.mount=s,s.root=u,o?we.root=u:n&&(n.mounted=s,n.mount&&n.mount.mounts.push(s)),u},unmount:function(e){var r=we.lookupPath(e,{follow_mount:!1});if(!we.isMountpoint(r.node))throw new we.ErrnoError(de.EINVAL);var t=r.node,n=t.mounted,o=we.getMounts(n);Object.keys(we.nameTable).forEach(function(e){for(var r=we.nameTable[e];r;){var t=r.name_next;-1!==o.indexOf(r.mount)&&we.destroyNode(r),r=t}}),t.mounted=null;var i=t.mount.mounts.indexOf(n);_(-1!==i),t.mount.mounts.splice(i,1)},lookup:function(e,r){return e.node_ops.lookup(e,r)},mknod:function(e,r,t){var n=we.lookupPath(e,{parent:!0}).node,o=he.basename(e);if(!o||"."===o||".."===o)throw new we.ErrnoError(de.EINVAL);var i=we.mayCreate(n,o);if(i)throw new we.ErrnoError(i);if(!n.node_ops.mknod)throw new we.ErrnoError(de.EPERM);return n.node_ops.mknod(n,o,r,t)},create:function(e,r){return r=void 0!==r?r:438,r&=4095,r|=32768,we.mknod(e,r,0)},mkdir:function(e,r){return r=void 0!==r?r:511,r&=1023,r|=16384,we.mknod(e,r,0)},mkdirTree:function(e,r){for(var t=e.split("/"),n="",o=0;o<t.length;++o)if(t[o]){n+="/"+t[o];try{we.mkdir(n,r)}catch(e){if(e.errno!=de.EEXIST)throw e}}},mkdev:function(e,r,t){return void 0===t&&(t=r,r=438),r|=8192,we.mknod(e,r,t)},symlink:function(e,r){if(!he.resolve(e))throw new we.ErrnoError(de.ENOENT);var t=we.lookupPath(r,{parent:!0}).node;if(!t)throw new we.ErrnoError(de.ENOENT);var n=he.basename(r),o=we.mayCreate(t,n);if(o)throw new we.ErrnoError(o);if(!t.node_ops.symlink)throw new we.ErrnoError(de.EPERM);return t.node_ops.symlink(t,n,e)},rename:function(e,r){var t,n,o=he.dirname(e),i=he.dirname(r),a=he.basename(e),s=he.basename(r);try{t=we.lookupPath(e,{parent:!0}).node,n=we.lookupPath(r,{parent:!0}).node}catch(e){throw new we.ErrnoError(de.EBUSY)}if(!t||!n)throw new we.ErrnoError(de.ENOENT);if(t.mount!==n.mount)throw new we.ErrnoError(de.EXDEV);var u,c=we.lookupNode(t,a),l=he.relative(e,i);if("."!==l.charAt(0))throw new we.ErrnoError(de.EINVAL);if("."!==(l=he.relative(r,o)).charAt(0))throw new we.ErrnoError(de.ENOTEMPTY);try{u=we.lookupNode(n,s)}catch(e){}if(c!==u){var f=we.isDir(c.mode),d=we.mayDelete(t,a,f);if(d)throw new we.ErrnoError(d);if(d=u?we.mayDelete(n,s,f):we.mayCreate(n,s))throw new we.ErrnoError(d);if(!t.node_ops.rename)throw new we.ErrnoError(de.EPERM);if(we.isMountpoint(c)||u&&we.isMountpoint(u))throw new we.ErrnoError(de.EBUSY);if(n!==t&&(d=we.nodePermissions(t,"w")))throw new we.ErrnoError(d);try{we.trackingDelegate.willMovePath&&we.trackingDelegate.willMovePath(e,r)}catch(t){console.log("FS.trackingDelegate['willMovePath']('"+e+"', '"+r+"') threw an exception: "+t.message)}we.hashRemoveNode(c);try{t.node_ops.rename(c,n,s)}catch(e){throw e}finally{we.hashAddNode(c)}try{we.trackingDelegate.onMovePath&&we.trackingDelegate.onMovePath(e,r)}catch(t){console.log("FS.trackingDelegate['onMovePath']('"+e+"', '"+r+"') threw an exception: "+t.message)}}},rmdir:function(e){var r=we.lookupPath(e,{parent:!0}).node,t=he.basename(e),n=we.lookupNode(r,t),o=we.mayDelete(r,t,!0);if(o)throw new we.ErrnoError(o);if(!r.node_ops.rmdir)throw new we.ErrnoError(de.EPERM);if(we.isMountpoint(n))throw new we.ErrnoError(de.EBUSY);try{we.trackingDelegate.willDeletePath&&we.trackingDelegate.willDeletePath(e)}catch(r){console.log("FS.trackingDelegate['willDeletePath']('"+e+"') threw an exception: "+r.message)}r.node_ops.rmdir(r,t),we.destroyNode(n);try{we.trackingDelegate.onDeletePath&&we.trackingDelegate.onDeletePath(e)}catch(r){console.log("FS.trackingDelegate['onDeletePath']('"+e+"') threw an exception: "+r.message)}},readdir:function(e){var r=we.lookupPath(e,{follow:!0}).node;if(!r.node_ops.readdir)throw new we.ErrnoError(de.ENOTDIR);return r.node_ops.readdir(r)},unlink:function(e){var r=we.lookupPath(e,{parent:!0}).node,t=he.basename(e),n=we.lookupNode(r,t),o=we.mayDelete(r,t,!1);if(o)throw new we.ErrnoError(o);if(!r.node_ops.unlink)throw new we.ErrnoError(de.EPERM);if(we.isMountpoint(n))throw new we.ErrnoError(de.EBUSY);try{we.trackingDelegate.willDeletePath&&we.trackingDelegate.willDeletePath(e)}catch(r){console.log("FS.trackingDelegate['willDeletePath']('"+e+"') threw an exception: "+r.message)}r.node_ops.unlink(r,t),we.destroyNode(n);try{we.trackingDelegate.onDeletePath&&we.trackingDelegate.onDeletePath(e)}catch(r){console.log("FS.trackingDelegate['onDeletePath']('"+e+"') threw an exception: "+r.message)}},readlink:function(e){var r=we.lookupPath(e).node;if(!r)throw new we.ErrnoError(de.ENOENT);if(!r.node_ops.readlink)throw new we.ErrnoError(de.EINVAL);return he.resolve(we.getPath(r.parent),r.node_ops.readlink(r))},stat:function(e,r){var t=we.lookupPath(e,{follow:!r}).node;if(!t)throw new we.ErrnoError(de.ENOENT);if(!t.node_ops.getattr)throw new we.ErrnoError(de.EPERM);return t.node_ops.getattr(t)},lstat:function(e){return we.stat(e,!0)},chmod:function(e,r,t){var n;"string"==typeof e?n=we.lookupPath(e,{follow:!t}).node:n=e;if(!n.node_ops.setattr)throw new we.ErrnoError(de.EPERM);n.node_ops.setattr(n,{mode:4095&r|-4096&n.mode,timestamp:Date.now()})},lchmod:function(e,r){we.chmod(e,r,!0)},fchmod:function(e,r){var t=we.getStream(e);if(!t)throw new we.ErrnoError(de.EBADF);we.chmod(t.node,r)},chown:function(e,r,t,n){var o;"string"==typeof e?o=we.lookupPath(e,{follow:!n}).node:o=e;if(!o.node_ops.setattr)throw new we.ErrnoError(de.EPERM);o.node_ops.setattr(o,{timestamp:Date.now()})},lchown:function(e,r,t){we.chown(e,r,t,!0)},fchown:function(e,r,t){var n=we.getStream(e);if(!n)throw new we.ErrnoError(de.EBADF);we.chown(n.node,r,t)},truncate:function(e,r){if(r<0)throw new we.ErrnoError(de.EINVAL);var t;"string"==typeof e?t=we.lookupPath(e,{follow:!0}).node:t=e;if(!t.node_ops.setattr)throw new we.ErrnoError(de.EPERM);if(we.isDir(t.mode))throw new we.ErrnoError(de.EISDIR);if(!we.isFile(t.mode))throw new we.ErrnoError(de.EINVAL);var n=we.nodePermissions(t,"w");if(n)throw new we.ErrnoError(n);t.node_ops.setattr(t,{size:r,timestamp:Date.now()})},ftruncate:function(e,r){var t=we.getStream(e);if(!t)throw new we.ErrnoError(de.EBADF);if(0==(2097155&t.flags))throw new we.ErrnoError(de.EINVAL);we.truncate(t.node,r)},utime:function(e,r,t){var n=we.lookupPath(e,{follow:!0}).node;n.node_ops.setattr(n,{timestamp:Math.max(r,t)})},open:function(e,r,t,n,i){if(""===e)throw new we.ErrnoError(de.ENOENT);var a;if(r="string"==typeof r?we.modeStringToFlags(r):r,t=void 0===t?438:t,t=64&r?4095&t|32768:0,"object"==typeof e)a=e;else{e=he.normalize(e);try{a=we.lookupPath(e,{follow:!(131072&r)}).node}catch(e){}}var s=!1;if(64&r)if(a){if(128&r)throw new we.ErrnoError(de.EEXIST)}else a=we.mknod(e,t,0),s=!0;if(!a)throw new we.ErrnoError(de.ENOENT);if(we.isChrdev(a.mode)&&(r&=-513),65536&r&&!we.isDir(a.mode))throw new we.ErrnoError(de.ENOTDIR);if(!s){var u=we.mayOpen(a,r);if(u)throw new we.ErrnoError(u)}512&r&&we.truncate(a,0),r&=-641;var c=we.createStream({node:a,path:we.getPath(a),flags:r,seekable:!0,position:0,stream_ops:a.stream_ops,ungotten:[],error:!1},n,i);c.stream_ops.open&&c.stream_ops.open(c),!o.logReadFiles||1&r||(we.readFiles||(we.readFiles={}),e in we.readFiles||(we.readFiles[e]=1,o.printErr("read file: "+e)));try{if(we.trackingDelegate.onOpenFile){var l=0;1!=(2097155&r)&&(l|=we.tracking.openFlags.READ),0!=(2097155&r)&&(l|=we.tracking.openFlags.WRITE),we.trackingDelegate.onOpenFile(e,l)}}catch(r){console.log("FS.trackingDelegate['onOpenFile']('"+e+"', flags) threw an exception: "+r.message)}return c},close:function(e){if(we.isClosed(e))throw new we.ErrnoError(de.EBADF);e.getdents&&(e.getdents=null);try{e.stream_ops.close&&e.stream_ops.close(e)}catch(e){throw e}finally{we.closeStream(e.fd)}e.fd=null},isClosed:function(e){return null===e.fd},llseek:function(e,r,t){if(we.isClosed(e))throw new we.ErrnoError(de.EBADF);if(!e.seekable||!e.stream_ops.llseek)throw new we.ErrnoError(de.ESPIPE);return e.position=e.stream_ops.llseek(e,r,t),e.ungotten=[],e.position},read:function(e,r,t,n,o){if(n<0||o<0)throw new we.ErrnoError(de.EINVAL);if(we.isClosed(e))throw new we.ErrnoError(de.EBADF);if(1==(2097155&e.flags))throw new we.ErrnoError(de.EBADF);if(we.isDir(e.node.mode))throw new we.ErrnoError(de.EISDIR);if(!e.stream_ops.read)throw new we.ErrnoError(de.EINVAL);var i=void 0!==o;if(i){if(!e.seekable)throw new we.ErrnoError(de.ESPIPE)}else o=e.position;var a=e.stream_ops.read(e,r,t,n,o);return i||(e.position+=a),a},write:function(e,r,t,n,o,i){if(n<0||o<0)throw new we.ErrnoError(de.EINVAL);if(we.isClosed(e))throw new we.ErrnoError(de.EBADF);if(0==(2097155&e.flags))throw new we.ErrnoError(de.EBADF);if(we.isDir(e.node.mode))throw new we.ErrnoError(de.EISDIR);if(!e.stream_ops.write)throw new we.ErrnoError(de.EINVAL);1024&e.flags&&we.llseek(e,0,2);var a=void 0!==o;if(a){if(!e.seekable)throw new we.ErrnoError(de.ESPIPE)}else o=e.position;var s=e.stream_ops.write(e,r,t,n,o,i);a||(e.position+=s);try{e.path&&we.trackingDelegate.onWriteToFile&&we.trackingDelegate.onWriteToFile(e.path)}catch(e){console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: "+e.message)}return s},allocate:function(e,r,t){if(we.isClosed(e))throw new we.ErrnoError(de.EBADF);if(r<0||t<=0)throw new we.ErrnoError(de.EINVAL);if(0==(2097155&e.flags))throw new we.ErrnoError(de.EBADF);if(!we.isFile(e.node.mode)&&!we.isDir(e.node.mode))throw new we.ErrnoError(de.ENODEV);if(!e.stream_ops.allocate)throw new we.ErrnoError(de.EOPNOTSUPP);e.stream_ops.allocate(e,r,t)},mmap:function(e,r,t,n,o,i,a){if(1==(2097155&e.flags))throw new we.ErrnoError(de.EACCES);if(!e.stream_ops.mmap)throw new we.ErrnoError(de.ENODEV);return e.stream_ops.mmap(e,r,t,n,o,i,a)},msync:function(e,r,t,n,o){return e&&e.stream_ops.msync?e.stream_ops.msync(e,r,t,n,o):0},munmap:function(e){return 0},ioctl:function(e,r,t){if(!e.stream_ops.ioctl)throw new we.ErrnoError(de.ENOTTY);return e.stream_ops.ioctl(e,r,t)},readFile:function(e,r){if((r=r||{}).flags=r.flags||"r",r.encoding=r.encoding||"binary","utf8"!==r.encoding&&"binary"!==r.encoding)throw new Error('Invalid encoding type "'+r.encoding+'"');var t,n=we.open(e,r.flags),o=we.stat(e).size,i=new Uint8Array(o);return we.read(n,i,0,o,0),"utf8"===r.encoding?t=v(i,0):"binary"===r.encoding&&(t=i),we.close(n),t},writeFile:function(e,r,t){(t=t||{}).flags=t.flags||"w";var n=we.open(e,t.flags,t.mode);if("string"==typeof r){var o=new Uint8Array(w(r)+1),i=g(r,o,0,o.length);we.write(n,o,0,i,void 0,t.canOwn)}else{if(!ArrayBuffer.isView(r))throw new Error("Unsupported data type");we.write(n,r,0,r.byteLength,void 0,t.canOwn)}we.close(n)},cwd:function(){return we.currentPath},chdir:function(e){var r=we.lookupPath(e,{follow:!0});if(null===r.node)throw new we.ErrnoError(de.ENOENT);if(!we.isDir(r.node.mode))throw new we.ErrnoError(de.ENOTDIR);var t=we.nodePermissions(r.node,"x");if(t)throw new we.ErrnoError(t);we.currentPath=r.path},createDefaultDirectories:function(){we.mkdir("/tmp"),we.mkdir("/home"),we.mkdir("/home/web_user")},createDefaultDevices:function(){var e;if(we.mkdir("/dev"),we.registerDevice(we.makedev(1,3),{read:function(){return 0},write:function(e,r,t,n,o){return n}}),we.mkdev("/dev/null",we.makedev(1,3)),_e.register(we.makedev(5,0),_e.default_tty_ops),_e.register(we.makedev(6,0),_e.default_tty1_ops),we.mkdev("/dev/tty",we.makedev(5,0)),we.mkdev("/dev/tty1",we.makedev(6,0)),"undefined"!=typeof crypto){var r=new Uint8Array(1);e=function(){return crypto.getRandomValues(r),r[0]}}else e=l?function(){return t(2).randomBytes(1)[0]}:function(){return 256*Math.random()|0};we.createDevice("/dev","random",e),we.createDevice("/dev","urandom",e),we.mkdir("/dev/shm"),we.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){we.mkdir("/proc"),we.mkdir("/proc/self"),we.mkdir("/proc/self/fd"),we.mount({mount:function(){var e=we.createNode("/proc/self","fd",16895,73);return e.node_ops={lookup:function(e,r){var t=+r,n=we.getStream(t);if(!n)throw new we.ErrnoError(de.EBADF);var o={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return n.path}}};return o.parent=o,o}},e}},{},"/proc/self/fd")},createStandardStreams:function(){o.stdin?we.createDevice("/dev","stdin",o.stdin):we.symlink("/dev/tty","/dev/stdin"),o.stdout?we.createDevice("/dev","stdout",null,o.stdout):we.symlink("/dev/tty","/dev/stdout"),o.stderr?we.createDevice("/dev","stderr",null,o.stderr):we.symlink("/dev/tty1","/dev/stderr");var e=we.open("/dev/stdin","r");_(0===e.fd,"invalid handle for stdin ("+e.fd+")");var r=we.open("/dev/stdout","w");_(1===r.fd,"invalid handle for stdout ("+r.fd+")");var t=we.open("/dev/stderr","w");_(2===t.fd,"invalid handle for stderr ("+t.fd+")")},ensureErrnoError:function(){we.ErrnoError||(we.ErrnoError=function(e,r){this.node=r,this.setErrno=function(e){for(var r in this.errno=e,de)if(de[r]===e){this.code=r;break}},this.setErrno(e),this.message=me[e],this.stack&&Object.defineProperty(this,"stack",{value:(new Error).stack,writable:!0})},we.ErrnoError.prototype=new Error,we.ErrnoError.prototype.constructor=we.ErrnoError,[de.ENOENT].forEach(function(e){we.genericErrors[e]=new we.ErrnoError(e),we.genericErrors[e].stack="<generic error, no stack>"}))},staticInit:function(){we.ensureErrnoError(),we.nameTable=new Array(4096),we.mount(ye,{},"/"),we.createDefaultDirectories(),we.createDefaultDevices(),we.createSpecialDirectories(),we.filesystems={MEMFS:ye,IDBFS:Ee,NODEFS:ve,WORKERFS:ge}},init:function(e,r,t){_(!we.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)"),we.init.initialized=!0,we.ensureErrnoError(),o.stdin=e||o.stdin,o.stdout=r||o.stdout,o.stderr=t||o.stderr,we.createStandardStreams()},quit:function(){we.init.initialized=!1;var e=o._fflush;e&&e(0);for(var r=0;r<we.streams.length;r++){var t=we.streams[r];t&&we.close(t)}},getMode:function(e,r){var t=0;return e&&(t|=365),r&&(t|=146),t},joinPath:function(e,r){var t=he.join.apply(null,e);return r&&"/"==t[0]&&(t=t.substr(1)),t},absolutePath:function(e,r){return he.resolve(r,e)},standardizePath:function(e){return he.normalize(e)},findObject:function(e,r){var t=we.analyzePath(e,r);return t.exists?t.object:(pe(t.error),null)},analyzePath:function(e,r){try{e=(n=we.lookupPath(e,{follow:!r})).path}catch(e){}var t={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var n=we.lookupPath(e,{parent:!0});t.parentExists=!0,t.parentPath=n.path,t.parentObject=n.node,t.name=he.basename(e),n=we.lookupPath(e,{follow:!r}),t.exists=!0,t.path=n.path,t.object=n.node,t.name=n.node.name,t.isRoot="/"===n.path}catch(e){t.error=e.errno}return t},createFolder:function(e,r,t,n){var o=he.join2("string"==typeof e?e:we.getPath(e),r),i=we.getMode(t,n);return we.mkdir(o,i)},createPath:function(e,r,t,n){e="string"==typeof e?e:we.getPath(e);for(var o=r.split("/").reverse();o.length;){var i=o.pop();if(i){var a=he.join2(e,i);try{we.mkdir(a)}catch(e){}e=a}}return a},createFile:function(e,r,t,n,o){var i=he.join2("string"==typeof e?e:we.getPath(e),r),a=we.getMode(n,o);return we.create(i,a)},createDataFile:function(e,r,t,n,o,i){var a=r?he.join2("string"==typeof e?e:we.getPath(e),r):e,s=we.getMode(n,o),u=we.create(a,s);if(t){if("string"==typeof t){for(var c=new Array(t.length),l=0,f=t.length;l<f;++l)c[l]=t.charCodeAt(l);t=c}we.chmod(u,146|s);var d=we.open(u,"w");we.write(d,t,0,t.length,0,i),we.close(d),we.chmod(u,s)}return u},createDevice:function(e,r,t,n){var o=he.join2("string"==typeof e?e:we.getPath(e),r),i=we.getMode(!!t,!!n);we.createDevice.major||(we.createDevice.major=64);var a=we.makedev(we.createDevice.major++,0);return we.registerDevice(a,{open:function(e){e.seekable=!1},close:function(e){n&&n.buffer&&n.buffer.length&&n(10)},read:function(e,r,n,o,i){for(var a=0,s=0;s<o;s++){var u;try{u=t()}catch(e){throw new we.ErrnoError(de.EIO)}if(void 0===u&&0===a)throw new we.ErrnoError(de.EAGAIN);if(null===u||void 0===u)break;a++,r[n+s]=u}return a&&(e.node.timestamp=Date.now()),a},write:function(e,r,t,o,i){for(var a=0;a<o;a++)try{n(r[t+a])}catch(e){throw new we.ErrnoError(de.EIO)}return o&&(e.node.timestamp=Date.now()),a}}),we.mkdev(o,i,a)},createLink:function(e,r,t,n,o){var i=he.join2("string"==typeof e?e:we.getPath(e),r);return we.symlink(t,i)},forceLoadFile:function(e){if(e.isDevice||e.isFolder||e.link||e.contents)return!0;var r=!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!o.read)throw new Error("Cannot load without read() or XMLHttpRequest.");try{e.contents=Hr(o.read(e.url),!0),e.usedBytes=e.contents.length}catch(e){r=!1}return r||pe(de.EIO),r},createLazyFile:function(e,r,t,n,o){function i(){this.lengthKnown=!1,this.chunks=[]}if(i.prototype.get=function(e){if(!(e>this.length-1||e<0)){var r=e%this.chunkSize,t=e/this.chunkSize|0;return this.getter(t)[r]}},i.prototype.setDataGetter=function(e){this.getter=e},i.prototype.cacheLength=function(){var e=new XMLHttpRequest;if(e.open("HEAD",t,!1),e.send(null),!(e.status>=200&&e.status<300||304===e.status))throw new Error("Couldn't load "+t+". Status: "+e.status);var r,n=Number(e.getResponseHeader("Content-length")),o=(r=e.getResponseHeader("Accept-Ranges"))&&"bytes"===r,i=(r=e.getResponseHeader("Content-Encoding"))&&"gzip"===r,a=1048576;o||(a=n);var s=this;s.setDataGetter(function(e){var r=e*a,o=(e+1)*a-1;if(o=Math.min(o,n-1),void 0===s.chunks[e]&&(s.chunks[e]=function(e,r){if(e>r)throw new Error("invalid range ("+e+", "+r+") or no bytes requested!");if(r>n-1)throw new Error("only "+n+" bytes available! programmer error!");var o=new XMLHttpRequest;if(o.open("GET",t,!1),n!==a&&o.setRequestHeader("Range","bytes="+e+"-"+r),"undefined"!=typeof Uint8Array&&(o.responseType="arraybuffer"),o.overrideMimeType&&o.overrideMimeType("text/plain; charset=x-user-defined"),o.send(null),!(o.status>=200&&o.status<300||304===o.status))throw new Error("Couldn't load "+t+". Status: "+o.status);return void 0!==o.response?new Uint8Array(o.response||[]):Hr(o.responseText||"",!0)}(r,o)),void 0===s.chunks[e])throw new Error("doXHR failed!");return s.chunks[e]}),!i&&n||(a=n=1,n=this.getter(0).length,a=n,console.log("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=n,this._chunkSize=a,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!c)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var a=new i;Object.defineProperties(a,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var s={isDevice:!1,contents:a}}else s={isDevice:!1,url:t};var u=we.createFile(e,r,s,n,o);s.contents?u.contents=s.contents:s.url&&(u.contents=null,u.url=s.url),Object.defineProperties(u,{usedBytes:{get:function(){return this.contents.length}}});var l={};return Object.keys(u.stream_ops).forEach(function(e){var r=u.stream_ops[e];l[e]=function(){if(!we.forceLoadFile(u))throw new we.ErrnoError(de.EIO);return r.apply(null,arguments)}}),l.read=function(e,r,t,n,o){if(!we.forceLoadFile(u))throw new we.ErrnoError(de.EIO);var i=e.node.contents;if(o>=i.length)return 0;var a=Math.min(i.length-o,n);if(_(a>=0),i.slice)for(var s=0;s<a;s++)r[t+s]=i[o+s];else for(s=0;s<a;s++)r[t+s]=i.get(o+s);return a},u.stream_ops=l,u},createPreloadedFile:function(e,r,t,n,i,a,s,u,c,l){Browser.init();var f=r?he.resolve(he.join2(e,r)):e;function d(t){function d(t){l&&l(),u||we.createDataFile(e,r,t,n,i,c),a&&a(),ne()}var p=!1;o.preloadPlugins.forEach(function(e){p||e.canHandle(f)&&(e.handle(t,f,d,function(){s&&s(),ne()}),p=!0)}),p||d(t)}te(),"string"==typeof t?Browser.asyncLoad(t,function(e){d(e)},s):d(t)},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(e,r,t){r=r||function(){},t=t||function(){};var n=we.indexedDB();try{var o=n.open(we.DB_NAME(),we.DB_VERSION)}catch(e){return t(e)}o.onupgradeneeded=function(){console.log("creating db"),o.result.createObjectStore(we.DB_STORE_NAME)},o.onsuccess=function(){var n=o.result.transaction([we.DB_STORE_NAME],"readwrite"),i=n.objectStore(we.DB_STORE_NAME),a=0,s=0,u=e.length;function c(){0==s?r():t()}e.forEach(function(e){var r=i.put(we.analyzePath(e).object.contents,e);r.onsuccess=function(){++a+s==u&&c()},r.onerror=function(){a+ ++s==u&&c()}}),n.onerror=t},o.onerror=t},loadFilesFromDB:function(e,r,t){r=r||function(){},t=t||function(){};var n=we.indexedDB();try{var o=n.open(we.DB_NAME(),we.DB_VERSION)}catch(e){return t(e)}o.onupgradeneeded=t,o.onsuccess=function(){var n=o.result;try{var i=n.transaction([we.DB_STORE_NAME],"readonly")}catch(e){return void t(e)}var a=i.objectStore(we.DB_STORE_NAME),s=0,u=0,c=e.length;function l(){0==u?r():t()}e.forEach(function(e){var r=a.get(e);r.onsuccess=function(){we.analyzePath(e).exists&&we.unlink(e),we.createDataFile(he.dirname(e),he.basename(e),r.result,!0,!0,!0),++s+u==c&&l()},r.onerror=function(){s+ ++u==c&&l()}}),i.onerror=t},o.onerror=t}},be={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(e,r){if("/"!==r[0]){var t;if(-100===e)t=we.cwd();else{var n=we.getStream(e);if(!n)throw new we.ErrnoError(de.EBADF);t=n.path}r=he.join2(t,r)}return r},doStat:function(e,r,t){try{var n=e(r)}catch(e){if(e&&e.node&&he.normalize(r)!==he.normalize(we.getPath(e.node)))return-de.ENOTDIR;throw e}return N[t>>2]=n.dev,N[t+4>>2]=0,N[t+8>>2]=n.ino,N[t+12>>2]=n.mode,N[t+16>>2]=n.nlink,N[t+20>>2]=n.uid,N[t+24>>2]=n.gid,N[t+28>>2]=n.rdev,N[t+32>>2]=0,N[t+36>>2]=n.size,N[t+40>>2]=4096,N[t+44>>2]=n.blocks,N[t+48>>2]=n.atime.getTime()/1e3|0,N[t+52>>2]=0,N[t+56>>2]=n.mtime.getTime()/1e3|0,N[t+60>>2]=0,N[t+64>>2]=n.ctime.getTime()/1e3|0,N[t+68>>2]=0,N[t+72>>2]=n.ino,0},doMsync:function(e,r,t,n){var o=new Uint8Array(D.subarray(e,e+t));we.msync(r,o,0,t,n)},doMkdir:function(e,r){return"/"===(e=he.normalize(e))[e.length-1]&&(e=e.substr(0,e.length-1)),we.mkdir(e,r,0),0},doMknod:function(e,r,t){switch(61440&r){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-de.EINVAL}return we.mknod(e,r,t),0},doReadlink:function(e,r,t){if(t<=0)return-de.EINVAL;var n=we.readlink(e),o=Math.min(t,w(n)),i=k[r+o];return g(n,D,r,t+1),k[r+o]=i,o},doAccess:function(e,r){if(-8&r)return-de.EINVAL;var t;t=we.lookupPath(e,{follow:!0}).node;var n="";return 4&r&&(n+="r"),2&r&&(n+="w"),1&r&&(n+="x"),n&&we.nodePermissions(t,n)?-de.EACCES:0},doDup:function(e,r,t){var n=we.getStream(t);return n&&we.close(n),we.open(e,r,0,t,t).fd},doReadv:function(e,r,t,n){for(var o=0,i=0;i<t;i++){var a=N[r+8*i>>2],s=N[r+(8*i+4)>>2],u=we.read(e,k,a,s,n);if(u<0)return-1;if(o+=u,u<s)break}return o},doWritev:function(e,r,t,n){for(var o=0,i=0;i<t;i++){var a=N[r+8*i>>2],s=N[r+(8*i+4)>>2],u=we.write(e,k,a,s,n);if(u<0)return-1;o+=u}return o},varargs:0,get:function(e){return be.varargs+=4,N[be.varargs-4>>2]},getStr:function(){return y(be.get())},getStreamFromFD:function(){var e=we.getStream(be.get());if(!e)throw new we.ErrnoError(de.EBADF);return e},getSocketFromFD:function(){var e=SOCKFS.getSocket(be.get());if(!e)throw new we.ErrnoError(de.EBADF);return e},getSocketAddress:function(e){var r=be.get(),t=be.get();if(e&&0===r)return null;var n=__read_sockaddr(r,t);if(n.errno)throw new we.ErrnoError(n.errno);return n.addr=DNS.lookup_addr(n.addr)||n.addr,n},get64:function(){var e=be.get(),r=be.get();return _(e>=0?0===r:-1===r),e},getZero:function(){_(0===be.get())}};var Te={};function Ae(e){for(;e.length;){var r=e.pop();e.pop()(r)}}function ke(e){return this.fromWireType(P[e>>2])}var De={},Oe={},Se={},Ne=48,Pe=57;function Ce(e){if(void 0===e)return"_unknown";var r=(e=e.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=Ne&&r<=Pe?"_"+e:e}function Ie(e,r){return e=Ce(e),new Function("body","return function "+e+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function Le(e,r){var t=Ie(r,function(e){this.name=r,this.message=e;var t=new Error(e).stack;void 0!==t&&(this.stack=this.toString()+"\n"+t.replace(/^Error(:[^\n]*)?\n/,""))});return t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},t}var Fe=void 0;function Me(e){throw new Fe(e)}function Re(e,r,t){function n(r){var n=t(r);n.length!==e.length&&Me("Mismatched type converter count");for(var o=0;o<e.length;++o)We(e[o],n[o])}e.forEach(function(e){Se[e]=r});var o=new Array(r.length),i=[],a=0;r.forEach(function(e,r){Oe.hasOwnProperty(e)?o[r]=Oe[e]:(i.push(e),De.hasOwnProperty(e)||(De[e]=[]),De[e].push(function(){o[r]=Oe[e],++a===i.length&&n(o)}))}),0===i.length&&n(o)}function Be(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+e)}}var xe=void 0;function je(e){for(var r="",t=e;D[t];)r+=xe[D[t++]];return r}var $e=void 0;function ze(e){throw new $e(e)}function We(e,r,t){if(t=t||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=r.name;if(e||ze('type "'+n+'" must have a positive integer typeid pointer'),Oe.hasOwnProperty(e)){if(t.ignoreDuplicateRegistrations)return;ze("Cannot register type '"+n+"' twice")}if(Oe[e]=r,delete Se[e],De.hasOwnProperty(e)){var o=De[e];delete De[e],o.forEach(function(e){e()})}}function Ge(e){if(!(this instanceof Je))return!1;if(!(e instanceof Je))return!1;for(var r=this.$$.ptrType.registeredClass,t=this.$$.ptr,n=e.$$.ptrType.registeredClass,o=e.$$.ptr;r.baseClass;)t=r.upcast(t),r=r.baseClass;for(;n.baseClass;)o=n.upcast(o),n=n.baseClass;return r===n&&t===o}function Ue(e){ze(e.$$.ptrType.registeredClass.name+" instance already deleted")}function Ve(){if(this.$$.ptr||Ue(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var e,r=Object.create(Object.getPrototypeOf(this),{$$:{value:(e=this.$$,{count:e.count,deleteScheduled:e.deleteScheduled,preservePointerOnDelete:e.preservePointerOnDelete,ptr:e.ptr,ptrType:e.ptrType,smartPtr:e.smartPtr,smartPtrType:e.smartPtrType})}});return r.$$.count.value+=1,r.$$.deleteScheduled=!1,r}function Ye(){var e;this.$$.ptr||Ue(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&ze("Object already scheduled for deletion"),this.$$.count.value-=1,0===this.$$.count.value&&((e=this.$$).smartPtr?e.smartPtrType.rawDestructor(e.smartPtr):e.ptrType.registeredClass.rawDestructor(e.ptr)),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function He(){return!this.$$.ptr}var qe=void 0,Xe=[];function Ke(){for(;Xe.length;){var e=Xe.pop();e.$$.deleteScheduled=!1,e.delete()}}function Ze(){return this.$$.ptr||Ue(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&ze("Object already scheduled for deletion"),Xe.push(this),1===Xe.length&&qe&&qe(Ke),this.$$.deleteScheduled=!0,this}function Je(){}var Qe={};function er(e,r,t){if(void 0===e[r].overloadTable){var n=e[r];e[r]=function(){return e[r].overloadTable.hasOwnProperty(arguments.length)||ze("Function '"+t+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+e[r].overloadTable+")!"),e[r].overloadTable[arguments.length].apply(this,arguments)},e[r].overloadTable=[],e[r].overloadTable[n.argCount]=n}}function rr(e,r,t){o.hasOwnProperty(e)?((void 0===t||void 0!==o[e].overloadTable&&void 0!==o[e].overloadTable[t])&&ze("Cannot register public name '"+e+"' twice"),er(o,e,e),o.hasOwnProperty(t)&&ze("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),o[e].overloadTable[t]=r):(o[e]=r,void 0!==t&&(o[e].numArguments=t))}function tr(e,r,t){for(;r!==t;)r.upcast||ze("Expected null or instance of "+t.name+", got an instance of "+r.name),e=r.upcast(e),r=r.baseClass;return e}function nr(e,r){if(null===r)return this.isReference&&ze("null is not a valid "+this.name),0;r.$$||ze('Cannot pass "'+Cr(r)+'" as a '+this.name),r.$$.ptr||ze("Cannot pass deleted object as a pointer of type "+this.name);var t=r.$$.ptrType.registeredClass;return tr(r.$$.ptr,t,this.registeredClass)}function or(e,r){var t;if(null===r)return this.isReference&&ze("null is not a valid "+this.name),this.isSmartPointer?(t=this.rawConstructor(),null!==e&&e.push(this.rawDestructor,t),t):0;r.$$||ze('Cannot pass "'+Cr(r)+'" as a '+this.name),r.$$.ptr||ze("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&r.$$.ptrType.isConst&&ze("Cannot convert argument of type "+(r.$$.smartPtrType?r.$$.smartPtrType.name:r.$$.ptrType.name)+" to parameter type "+this.name);var n=r.$$.ptrType.registeredClass;if(t=tr(r.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===r.$$.smartPtr&&ze("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:r.$$.smartPtrType===this?t=r.$$.smartPtr:ze("Cannot convert argument of type "+(r.$$.smartPtrType?r.$$.smartPtrType.name:r.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:t=r.$$.smartPtr;break;case 2:if(r.$$.smartPtrType===this)t=r.$$.smartPtr;else{var o=r.clone();t=this.rawShare(t,Pr(function(){o.delete()})),null!==e&&e.push(this.rawDestructor,t)}break;default:ze("Unsupporting sharing policy")}return t}function ir(e,r){if(null===r)return this.isReference&&ze("null is not a valid "+this.name),0;r.$$||ze('Cannot pass "'+Cr(r)+'" as a '+this.name),r.$$.ptr||ze("Cannot pass deleted object as a pointer of type "+this.name),r.$$.ptrType.isConst&&ze("Cannot convert argument of type "+r.$$.ptrType.name+" to parameter type "+this.name);var t=r.$$.ptrType.registeredClass;return tr(r.$$.ptr,t,this.registeredClass)}function ar(e){return this.rawGetPointee&&(e=this.rawGetPointee(e)),e}function sr(e){this.rawDestructor&&this.rawDestructor(e)}function ur(e){null!==e&&e.delete()}function cr(){return Object.keys(dr).length}function lr(){var e=[];for(var r in dr)dr.hasOwnProperty(r)&&e.push(dr[r]);return e}function fr(e){qe=e,Xe.length&&qe&&qe(Ke)}var dr={};function pr(e,r){return r=function(e,r){for(void 0===r&&ze("ptr should not be undefined");e.baseClass;)r=e.upcast(r),e=e.baseClass;return r}(e,r),dr[r]}function mr(e,r){return r.ptrType&&r.ptr||Me("makeClassHandle requires ptr and ptrType"),!!r.smartPtrType!==!!r.smartPtr&&Me("Both smartPtrType and smartPtr must be specified"),r.count={value:1},Object.create(e,{$$:{value:r}})}function hr(e){var r=this.getPointee(e);if(!r)return this.destructor(e),null;var t=pr(this.registeredClass,r);if(void 0!==t){if(0===t.$$.count.value)return t.$$.ptr=r,t.$$.smartPtr=e,t.clone();var n=t.clone();return this.destructor(e),n}function o(){return this.isSmartPointer?mr(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:r,smartPtrType:this,smartPtr:e}):mr(this.registeredClass.instancePrototype,{ptrType:this,ptr:e})}var i,a=this.registeredClass.getActualType(r),s=Qe[a];if(!s)return o.call(this);i=this.isConst?s.constPointerType:s.pointerType;var u=function e(r,t,n){if(t===n)return r;if(void 0===n.baseClass)return null;var o=e(r,t,n.baseClass);return null===o?null:n.downcast(o)}(r,this.registeredClass,i.registeredClass);return null===u?o.call(this):this.isSmartPointer?mr(i.registeredClass.instancePrototype,{ptrType:i,ptr:u,smartPtrType:this,smartPtr:e}):mr(i.registeredClass.instancePrototype,{ptrType:i,ptr:u})}function _r(e,r,t,n,o,i,a,s,u,c,l){this.name=e,this.registeredClass=r,this.isReference=t,this.isConst=n,this.isSmartPointer=o,this.pointeeType=i,this.sharingPolicy=a,this.rawGetPointee=s,this.rawConstructor=u,this.rawShare=c,this.rawDestructor=l,o||void 0!==r.baseClass?this.toWireType=or:n?(this.toWireType=nr,this.destructorFunction=null):(this.toWireType=ir,this.destructorFunction=null)}function yr(e,r,t){o.hasOwnProperty(e)||Me("Replacing nonexistant public symbol"),void 0!==o[e].overloadTable&&void 0!==t?o[e].overloadTable[t]=r:(o[e]=r,o[e].argCount=t)}function Er(e,r){var t;if(e=je(e),void 0!==o["FUNCTION_TABLE_"+e])t=o["FUNCTION_TABLE_"+e][r];else if("undefined"!=typeof FUNCTION_TABLE)t=FUNCTION_TABLE[r];else{var n=o.asm["dynCall_"+e];void 0===n&&void 0===(n=o.asm["dynCall_"+e.replace(/f/g,"d")])&&ze("No dynCall invoker for signature: "+e),t=function(t){for(var n=[],o=1;o<e.length;++o)n.push("a"+o);var i="return function dynCall_"+e+"_"+r+"("+n.join(", ")+") {\n";return i+="    return dynCall(rawFunction"+(n.length?", ":"")+n.join(", ")+");\n",i+="};\n",new Function("dynCall","rawFunction",i)(t,r)}(n)}return"function"!=typeof t&&ze("unknown function pointer with signature "+e+": "+r),t}var vr=void 0;function gr(e){var r=bt(e),t=je(r);return Tt(r),t}function wr(e,r){var t=[],n={};throw r.forEach(function e(r){n[r]||Oe[r]||(Se[r]?Se[r].forEach(e):(t.push(r),n[r]=!0))}),new vr(e+": "+t.map(gr).join([", "]))}function br(e,r){for(var t=[],n=0;n<e;n++)t.push(N[(r>>2)+n]);return t}function Tr(e,r){if(!(e instanceof Function))throw new TypeError("new_ called with constructor type "+typeof e+" which is not a function");var t=Ie(e.name||"unknownFunctionName",function(){});t.prototype=e.prototype;var n=new t,o=e.apply(n,r);return o instanceof Object?o:n}function Ar(e,r,t,n,o){var i=r.length;i<2&&ze("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var a=null!==r[1]&&null!==t,s=!1,u=1;u<r.length;++u)if(null!==r[u]&&void 0===r[u].destructorFunction){s=!0;break}var c="void"!==r[0].name,l="",f="";for(u=0;u<i-2;++u)l+=(0!==u?", ":"")+"arg"+u,f+=(0!==u?", ":"")+"arg"+u+"Wired";var d="return function "+Ce(e)+"("+l+") {\nif (arguments.length !== "+(i-2)+") {\nthrowBindingError('function "+e+" called with ' + arguments.length + ' arguments, expected "+(i-2)+" args!');\n}\n";s&&(d+="var destructors = [];\n");var p=s?"destructors":"null",m=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],h=[ze,n,o,Ae,r[0],r[1]];a&&(d+="var thisWired = classParam.toWireType("+p+", this);\n");for(u=0;u<i-2;++u)d+="var arg"+u+"Wired = argType"+u+".toWireType("+p+", arg"+u+"); // "+r[u+2].name+"\n",m.push("argType"+u),h.push(r[u+2]);if(a&&(f="thisWired"+(f.length>0?", ":"")+f),d+=(c?"var rv = ":"")+"invoker(fn"+(f.length>0?", ":"")+f+");\n",s)d+="runDestructors(destructors);\n";else for(u=a?1:2;u<r.length;++u){var _=1===u?"thisWired":"arg"+(u-2)+"Wired";null!==r[u].destructorFunction&&(d+=_+"_dtor("+_+"); // "+r[u].name+"\n",m.push(_+"_dtor"),h.push(r[u].destructorFunction))}return c&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",m.push(d),Tr(Function,m).apply(null,h)}var kr=[],Dr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Or(e){e>4&&0==--Dr[e].refcount&&(Dr[e]=void 0,kr.push(e))}function Sr(){for(var e=0,r=5;r<Dr.length;++r)void 0!==Dr[r]&&++e;return e}function Nr(){for(var e=5;e<Dr.length;++e)if(void 0!==Dr[e])return Dr[e];return null}function Pr(e){switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=kr.length?kr.pop():Dr.length;return Dr[r]={refcount:1,value:e},r}}function Cr(e){if(null===e)return"null";var r=typeof e;return"object"===r||"array"===r||"function"===r?e.toString():""+e}var Ir={};var Lr=[];function Fr(e,r){var t=Oe[e];return void 0===t&&ze(r+" has unknown type "+gr(e)),t}var Mr=L+=16;L+=16;var Rr={};var Br={};var xr=1;function jr(e){return e%4==0&&(e%100!=0||e%400==0)}function $r(e,r){for(var t=0,n=0;n<=r;t+=e[n++]);return t}var zr=[31,29,31,30,31,30,31,31,30,31,30,31],Wr=[31,28,31,30,31,30,31,31,30,31,30,31];function Gr(e,r){for(var t=new Date(e.getTime());r>0;){var n=jr(t.getFullYear()),o=t.getMonth(),i=(n?zr:Wr)[o];if(!(r>i-t.getDate()))return t.setDate(t.getDate()+r),t;r-=i-t.getDate()+1,t.setDate(1),o<11?t.setMonth(o+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return t}function Ur(e,r,t,n){var o=N[n+40>>2],i={tm_sec:N[n>>2],tm_min:N[n+4>>2],tm_hour:N[n+8>>2],tm_mday:N[n+12>>2],tm_mon:N[n+16>>2],tm_year:N[n+20>>2],tm_wday:N[n+24>>2],tm_yday:N[n+28>>2],tm_isdst:N[n+32>>2],tm_gmtoff:N[n+36>>2],tm_zone:o?y(o):""},a=y(t),s={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S"};for(var u in s)a=a.replace(new RegExp(u,"g"),s[u]);var c=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],l=["January","February","March","April","May","June","July","August","September","October","November","December"];function f(e,r,t){for(var n="number"==typeof e?e.toString():e||"";n.length<r;)n=t[0]+n;return n}function d(e,r){return f(e,r,"0")}function p(e,r){function t(e){return e<0?-1:e>0?1:0}var n;return 0===(n=t(e.getFullYear()-r.getFullYear()))&&0===(n=t(e.getMonth()-r.getMonth()))&&(n=t(e.getDate()-r.getDate())),n}function m(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function h(e){var r=Gr(new Date(e.tm_year+1900,0,1),e.tm_yday),t=new Date(r.getFullYear(),0,4),n=new Date(r.getFullYear()+1,0,4),o=m(t),i=m(n);return p(o,r)<=0?p(i,r)<=0?r.getFullYear()+1:r.getFullYear():r.getFullYear()-1}var _={"%a":function(e){return c[e.tm_wday].substring(0,3)},"%A":function(e){return c[e.tm_wday]},"%b":function(e){return l[e.tm_mon].substring(0,3)},"%B":function(e){return l[e.tm_mon]},"%C":function(e){return d((e.tm_year+1900)/100|0,2)},"%d":function(e){return d(e.tm_mday,2)},"%e":function(e){return f(e.tm_mday,2," ")},"%g":function(e){return h(e).toString().substring(2)},"%G":function(e){return h(e)},"%H":function(e){return d(e.tm_hour,2)},"%I":function(e){var r=e.tm_hour;return 0==r?r=12:r>12&&(r-=12),d(r,2)},"%j":function(e){return d(e.tm_mday+$r(jr(e.tm_year+1900)?zr:Wr,e.tm_mon-1),3)},"%m":function(e){return d(e.tm_mon+1,2)},"%M":function(e){return d(e.tm_min,2)},"%n":function(){return"\n"},"%p":function(e){return e.tm_hour>=0&&e.tm_hour<12?"AM":"PM"},"%S":function(e){return d(e.tm_sec,2)},"%t":function(){return"\t"},"%u":function(e){return new Date(e.tm_year+1900,e.tm_mon+1,e.tm_mday,0,0,0,0).getDay()||7},"%U":function(e){var r=new Date(e.tm_year+1900,0,1),t=0===r.getDay()?r:Gr(r,7-r.getDay()),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(t,n)<0){var o=$r(jr(n.getFullYear())?zr:Wr,n.getMonth()-1)-31,i=31-t.getDate()+o+n.getDate();return d(Math.ceil(i/7),2)}return 0===p(t,r)?"01":"00"},"%V":function(e){var r,t=new Date(e.tm_year+1900,0,4),n=new Date(e.tm_year+1901,0,4),o=m(t),i=m(n),a=Gr(new Date(e.tm_year+1900,0,1),e.tm_yday);return p(a,o)<0?"53":p(i,a)<=0?"01":(r=o.getFullYear()<e.tm_year+1900?e.tm_yday+32-o.getDate():e.tm_yday+1-o.getDate(),d(Math.ceil(r/7),2))},"%w":function(e){return new Date(e.tm_year+1900,e.tm_mon+1,e.tm_mday,0,0,0,0).getDay()},"%W":function(e){var r=new Date(e.tm_year,0,1),t=1===r.getDay()?r:Gr(r,0===r.getDay()?1:7-r.getDay()+1),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(t,n)<0){var o=$r(jr(n.getFullYear())?zr:Wr,n.getMonth()-1)-31,i=31-t.getDate()+o+n.getDate();return d(Math.ceil(i/7),2)}return 0===p(t,r)?"01":"00"},"%y":function(e){return(e.tm_year+1900).toString().substring(2)},"%Y":function(e){return e.tm_year+1900},"%z":function(e){var r=e.tm_gmtoff,t=r>=0;return r=(r=Math.abs(r)/60)/60*100+r%60,(t?"+":"-")+String("0000"+r).slice(-4)},"%Z":function(e){return e.tm_zone},"%%":function(){return"%"}};for(var u in _)a.indexOf(u)>=0&&(a=a.replace(new RegExp(u,"g"),_[u](i)));var E,v,g=Hr(a,!1);return g.length>r?0:(E=g,v=e,k.set(E,v),g.length-1)}if(we.staticInit(),Y.unshift(function(){o.noFSInit||we.init.initialized||we.init()}),H.push(function(){we.ignorePermissions=!1}),q.push(function(){we.quit()}),Y.unshift(function(){_e.init()}),q.push(function(){_e.shutdown()}),l){var Vr=t(1),Yr=t(0);ve.staticInit()}function Hr(e,r,t){var n=t>0?t:w(e)+1,o=new Array(n),i=g(e,o,0,o.length);return r&&(o.length=i),o}Fe=o.InternalError=Le(Error,"InternalError"),function(){for(var e=new Array(256),r=0;r<256;++r)e[r]=String.fromCharCode(r);xe=e}(),$e=o.BindingError=Le(Error,"BindingError"),Je.prototype.isAliasOf=Ge,Je.prototype.clone=Ve,Je.prototype.delete=Ye,Je.prototype.isDeleted=He,Je.prototype.deleteLater=Ze,_r.prototype.getPointee=ar,_r.prototype.destructor=sr,_r.prototype.argPackAdvance=8,_r.prototype.readValueFromPointer=ke,_r.prototype.deleteObject=ur,_r.prototype.fromWireType=hr,o.getInheritedInstanceCount=cr,o.getLiveInheritedInstances=lr,o.flushPendingDeletes=Ke,o.setDelayFunction=fr,vr=o.UnboundTypeError=Le(Error,"UnboundTypeError"),o.count_emval_handles=Sr,o.get_first_emval=Nr,function e(r){var t,n;e.called?(n=N[Mr>>2],t=N[n>>2]):(e.called=!0,Rr.USER=Rr.LOGNAME="web_user",Rr.PATH="/",Rr.PWD="/",Rr.HOME="/home/web_user",Rr.LANG="C.UTF-8",Rr._=o.thisProgram,t=p(1024),n=p(256),N[n>>2]=t,N[Mr>>2]=n);var i=[],a=0;for(var s in r)if("string"==typeof r[s]){var u=s+"="+r[s];i.push(u),a+=u.length}if(a>1024)throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");for(var c=0;c<i.length;c++)J(u=i[c],t),N[n+4*c>>2]=t,t+=u.length+1;N[n+4*i.length>>2]=0}(Rr),B=p(4),R=m((M=m(L))+W),N[B>>2]=R,F=!0,o.wasmTableSize=3952,o.wasmMaxTableSize=3952,o.asmGlobalArg={},o.asmLibraryArg={abort:Pt,enlargeMemory:function(){z()},getTotalMemory:function(){return G},abortOnCannotGrowMemory:z,invoke_diiiii:function(e,r,t,n,i,a){try{return o.dynCall_diiiii(e,r,t,n,i,a)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_i:function(e){try{return o.dynCall_i(e)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_ii:function(e,r){try{return o.dynCall_ii(e,r)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_iii:function(e,r,t){try{return o.dynCall_iii(e,r,t)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_iiii:function(e,r,t,n){try{return o.dynCall_iiii(e,r,t,n)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_iiiii:function(e,r,t,n,i){try{return o.dynCall_iiiii(e,r,t,n,i)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_iiiiii:function(e,r,t,n,i,a){try{return o.dynCall_iiiiii(e,r,t,n,i,a)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_iiiiiii:function(e,r,t,n,i,a,s){try{return o.dynCall_iiiiiii(e,r,t,n,i,a,s)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_iiiiiiii:function(e,r,t,n,i,a,s,u){try{return o.dynCall_iiiiiiii(e,r,t,n,i,a,s,u)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_iiiiiiiii:function(e,r,t,n,i,a,s,u,c){try{return o.dynCall_iiiiiiiii(e,r,t,n,i,a,s,u,c)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_iiiiiiiiiiii:function(e,r,t,n,i,a,s,u,c,l,f,d){try{return o.dynCall_iiiiiiiiiiii(e,r,t,n,i,a,s,u,c,l,f,d)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_v:function(e){try{o.dynCall_v(e)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_vi:function(e,r){try{o.dynCall_vi(e,r)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_vii:function(e,r,t){try{o.dynCall_vii(e,r,t)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_viii:function(e,r,t,n){try{o.dynCall_viii(e,r,t,n)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_viiii:function(e,r,t,n,i){try{o.dynCall_viiii(e,r,t,n,i)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_viiiii:function(e,r,t,n,i,a){try{o.dynCall_viiiii(e,r,t,n,i,a)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_viiiiii:function(e,r,t,n,i,a,s){try{o.dynCall_viiiiii(e,r,t,n,i,a,s)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_viiiiiii:function(e,r,t,n,i,a,s,u){try{o.dynCall_viiiiiii(e,r,t,n,i,a,s,u)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_viiiiiiii:function(e,r,t,n,i,a,s,u,c){try{o.dynCall_viiiiiiii(e,r,t,n,i,a,s,u,c)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_viiiiiiiii:function(e,r,t,n,i,a,s,u,c,l){try{o.dynCall_viiiiiiiii(e,r,t,n,i,a,s,u,c,l)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_viiiiiiiiii:function(e,r,t,n,i,a,s,u,c,l,f){try{o.dynCall_viiiiiiiiii(e,r,t,n,i,a,s,u,c,l,f)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},invoke_viiiiiiiiiiiiiii:function(e,r,t,n,i,a,s,u,c,l,f,d,p,m,h,_){try{o.dynCall_viiiiiiiiiiiiiii(e,r,t,n,i,a,s,u,c,l,f,d,p,m,h,_)}catch(e){if("number"!=typeof e&&"longjmp"!==e)throw e;o.setThrew(1,0)}},__ZSt18uncaught_exceptionv:se,___assert_fail:function(e,r,t,n){Pt("Assertion failed: "+y(e)+", at: "+[r?y(r):"unknown filename",t,n?y(n):"unknown function"])},___cxa_allocate_exception:function(e){return At(e)},___cxa_begin_catch:function(e){var r=ue.infos[e];return r&&!r.caught&&(r.caught=!0,se.uncaught_exception--),r&&(r.rethrown=!1),ue.caught.push(e),ue.addRef(ue.deAdjust(e)),e},___cxa_current_primary_exception:function(){var e=ue.caught[ue.caught.length-1]||0;return e&&ue.addRef(ue.deAdjust(e)),e},___cxa_decrement_exception_refcount:function(e){ue.decRef(ue.deAdjust(e))},___cxa_end_catch:function(){o.setThrew(0);var e=ue.caught.pop();e&&(ue.decRef(ue.deAdjust(e)),ue.last=0)},___cxa_find_matching_catch_2:function(){return fe.apply(null,arguments)},___cxa_find_matching_catch_3:function(){return fe.apply(null,arguments)},___cxa_find_matching_catch_5:function(){return fe.apply(null,arguments)},___cxa_free_exception:ce,___cxa_increment_exception_refcount:function(e){ue.addRef(ue.deAdjust(e))},___cxa_pure_virtual:function(){throw h=!0,"Pure virtual function called!"},___cxa_rethrow:le,___cxa_rethrow_primary_exception:function(e){e&&(ue.caught.push(e),ue.infos[e].rethrown=!0,le())},___cxa_throw:function(e,r,t){throw ue.infos[e]={ptr:e,adjusted:e,type:r,destructor:t,refcount:0,caught:!1,rethrown:!1},ue.last=e,"uncaught_exception"in se?se.uncaught_exception++:se.uncaught_exception=1,e},___lock:function(){},___map_file:function(e,r){return pe(de.EPERM),-1},___resumeException:function(e){throw ue.last||(ue.last=e),e},___setErrNo:pe,___syscall140:function(e,r){be.varargs=r;try{var t=be.getStreamFromFD(),n=(be.get(),be.get()),o=be.get(),i=be.get(),a=n;return we.llseek(t,a,i),N[o>>2]=t.position,t.getdents&&0===a&&0===i&&(t.getdents=null),0}catch(e){return void 0!==we&&e instanceof we.ErrnoError||Pt(e),-e.errno}},___syscall145:function(e,r){be.varargs=r;try{var t=be.getStreamFromFD(),n=be.get(),o=be.get();return be.doReadv(t,n,o)}catch(e){return void 0!==we&&e instanceof we.ErrnoError||Pt(e),-e.errno}},___syscall146:function(e,r){be.varargs=r;try{var t=be.getStreamFromFD(),n=be.get(),o=be.get();return be.doWritev(t,n,o)}catch(e){return void 0!==we&&e instanceof we.ErrnoError||Pt(e),-e.errno}},___syscall221:function(e,r){be.varargs=r;try{var t=be.getStreamFromFD();switch(be.get()){case 0:return(n=be.get())<0?-de.EINVAL:we.open(t.path,t.flags,0,n).fd;case 1:case 2:return 0;case 3:return t.flags;case 4:var n=be.get();return t.flags|=n,0;case 12:case 12:return n=be.get(),O[n+0>>1]=2,0;case 13:case 14:case 13:case 14:return 0;case 16:case 8:return-de.EINVAL;case 9:return pe(de.EINVAL),-1;default:return-de.EINVAL}}catch(e){return void 0!==we&&e instanceof we.ErrnoError||Pt(e),-e.errno}},___syscall5:function(e,r){be.varargs=r;try{var t=be.getStr(),n=be.get(),o=be.get();return we.open(t,n,o).fd}catch(e){return void 0!==we&&e instanceof we.ErrnoError||Pt(e),-e.errno}},___syscall54:function(e,r){be.varargs=r;try{var t=be.getStreamFromFD(),n=be.get();switch(n){case 21509:case 21505:return t.tty?0:-de.ENOTTY;case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:return t.tty?0:-de.ENOTTY;case 21519:if(!t.tty)return-de.ENOTTY;var o=be.get();return N[o>>2]=0,0;case 21520:return t.tty?-de.EINVAL:-de.ENOTTY;case 21531:return o=be.get(),we.ioctl(t,n,o);case 21523:case 21524:return t.tty?0:-de.ENOTTY;default:Pt("bad ioctl syscall "+n)}}catch(e){return void 0!==we&&e instanceof we.ErrnoError||Pt(e),-e.errno}},___syscall6:function(e,r){be.varargs=r;try{var t=be.getStreamFromFD();return we.close(t),0}catch(e){return void 0!==we&&e instanceof we.ErrnoError||Pt(e),-e.errno}},___syscall91:function(e,r){be.varargs=r;try{var t=be.get(),n=be.get(),o=be.mappings[t];if(!o)return 0;if(n===o.len){var i=we.getStream(o.fd);be.doMsync(t,i,n,o.flags),we.munmap(i),be.mappings[t]=null,o.allocated&&Tt(o.malloc)}return 0}catch(e){return void 0!==we&&e instanceof we.ErrnoError||Pt(e),-e.errno}},___unlock:function(){},__embind_finalize_value_object:function(e){var r=Te[e];delete Te[e];var t=r.rawConstructor,n=r.rawDestructor,o=r.fields;Re([e],o.map(function(e){return e.getterReturnType}).concat(o.map(function(e){return e.setterArgumentType})),function(e){var i={};return o.forEach(function(r,t){var n=r.fieldName,a=e[t],s=r.getter,u=r.getterContext,c=e[t+o.length],l=r.setter,f=r.setterContext;i[n]={read:function(e){return a.fromWireType(s(u,e))},write:function(e,r){var t=[];l(f,e,c.toWireType(t,r)),Ae(t)}}}),[{name:r.name,fromWireType:function(e){var r={};for(var t in i)r[t]=i[t].read(e);return n(e),r},toWireType:function(e,r){for(var o in i)if(!(o in r))throw new TypeError("Missing field");var a=t();for(o in i)i[o].write(a,r[o]);return null!==e&&e.push(n,a),a},argPackAdvance:8,readValueFromPointer:ke,destructorFunction:n}]})},__embind_register_bool:function(e,r,t,n,o){var i=Be(t);We(e,{name:r=je(r),fromWireType:function(e){return!!e},toWireType:function(e,r){return r?n:o},argPackAdvance:8,readValueFromPointer:function(e){var n;if(1===t)n=k;else if(2===t)n=O;else{if(4!==t)throw new TypeError("Unknown boolean type size: "+r);n=N}return this.fromWireType(n[e>>i])},destructorFunction:null})},__embind_register_class:function(e,r,t,n,o,i,a,s,u,c,l,f,d){l=je(l),i=Er(o,i),s&&(s=Er(a,s)),c&&(c=Er(u,c)),d=Er(f,d);var p=Ce(l);rr(p,function(){wr("Cannot construct "+l+" due to unbound types",[n])}),Re([e,r,t],n?[n]:[],function(r){var t,o;r=r[0],o=n?(t=r.registeredClass).instancePrototype:Je.prototype;var a=Ie(p,function(){if(Object.getPrototypeOf(this)!==u)throw new $e("Use 'new' to construct "+l);if(void 0===f.constructor_body)throw new $e(l+" has no accessible constructor");var e=f.constructor_body[arguments.length];if(void 0===e)throw new $e("Tried to invoke ctor of "+l+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(f.constructor_body).toString()+") parameters instead!");return e.apply(this,arguments)}),u=Object.create(o,{constructor:{value:a}});a.prototype=u;var f=new function(e,r,t,n,o,i,a,s){this.name=e,this.constructor=r,this.instancePrototype=t,this.rawDestructor=n,this.baseClass=o,this.getActualType=i,this.upcast=a,this.downcast=s,this.pureVirtualFunctions=[]}(l,a,u,d,t,i,s,c),m=new _r(l,f,!0,!1,!1),h=new _r(l+"*",f,!1,!1,!1),_=new _r(l+" const*",f,!1,!0,!1);return Qe[e]={pointerType:h,constPointerType:_},yr(p,a),[m,h,_]})},__embind_register_class_constructor:function(e,r,t,n,o,i){var a=br(r,t);o=Er(n,o),Re([],[e],function(e){var t="constructor "+(e=e[0]).name;if(void 0===e.registeredClass.constructor_body&&(e.registeredClass.constructor_body=[]),void 0!==e.registeredClass.constructor_body[r-1])throw new $e("Cannot register multiple constructors with identical number of parameters ("+(r-1)+") for class '"+e.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return e.registeredClass.constructor_body[r-1]=function(){wr("Cannot construct "+e.name+" due to unbound types",a)},Re([],a,function(n){return e.registeredClass.constructor_body[r-1]=function(){arguments.length!==r-1&&ze(t+" called with "+arguments.length+" arguments, expected "+(r-1));var e=[],a=new Array(r);a[0]=i;for(var s=1;s<r;++s)a[s]=n[s].toWireType(e,arguments[s-1]);var u=o.apply(null,a);return Ae(e),n[0].fromWireType(u)},[]}),[]})},__embind_register_class_function:function(e,r,t,n,o,i,a,s){var u=br(t,n);r=je(r),i=Er(o,i),Re([],[e],function(e){var n=(e=e[0]).name+"."+r;function o(){wr("Cannot call "+n+" due to unbound types",u)}s&&e.registeredClass.pureVirtualFunctions.push(r);var c=e.registeredClass.instancePrototype,l=c[r];return void 0===l||void 0===l.overloadTable&&l.className!==e.name&&l.argCount===t-2?(o.argCount=t-2,o.className=e.name,c[r]=o):(er(c,r,n),c[r].overloadTable[t-2]=o),Re([],u,function(o){var s=Ar(n,o,e,i,a);return void 0===c[r].overloadTable?(s.argCount=t-2,c[r]=s):c[r].overloadTable[t-2]=s,[]}),[]})},__embind_register_emval:function(e,r){We(e,{name:r=je(r),fromWireType:function(e){var r=Dr[e].value;return Or(e),r},toWireType:function(e,r){return Pr(r)},argPackAdvance:8,readValueFromPointer:ke,destructorFunction:null})},__embind_register_float:function(e,r,t){var n=Be(t);We(e,{name:r=je(r),fromWireType:function(e){return e},toWireType:function(e,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+Cr(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:function(e,r){switch(r){case 2:return function(e){return this.fromWireType(C[e>>2])};case 3:return function(e){return this.fromWireType(I[e>>3])};default:throw new TypeError("Unknown float type: "+e)}}(r,n),destructorFunction:null})},__embind_register_function:function(e,r,t,n,o,i){var a=br(r,t);e=je(e),o=Er(n,o),rr(e,function(){wr("Cannot call "+e+" due to unbound types",a)},r-1),Re([],a,function(t){var n=[t[0],null].concat(t.slice(1));return yr(e,Ar(e,n,null,o,i),r-1),[]})},__embind_register_integer:function(e,r,t,n,o){r=je(r),-1===o&&(o=4294967295);var i=Be(t),a=function(e){return e};if(0===n){var s=32-8*t;a=function(e){return e<<s>>>s}}var u=-1!=r.indexOf("unsigned");We(e,{name:r,fromWireType:a,toWireType:function(e,t){if("number"!=typeof t&&"boolean"!=typeof t)throw new TypeError('Cannot convert "'+Cr(t)+'" to '+this.name);if(t<n||t>o)throw new TypeError('Passing a number "'+Cr(t)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+n+", "+o+"]!");return u?t>>>0:0|t},argPackAdvance:8,readValueFromPointer:function(e,r,t){switch(r){case 0:return t?function(e){return k[e]}:function(e){return D[e]};case 1:return t?function(e){return O[e>>1]}:function(e){return S[e>>1]};case 2:return t?function(e){return N[e>>2]}:function(e){return P[e>>2]};default:throw new TypeError("Unknown integer type: "+e)}}(r,i,0!==n),destructorFunction:null})},__embind_register_memory_view:function(e,r,t){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function o(e){var r=P,t=r[e>>=2],o=r[e+1];return new n(r.buffer,o,t)}We(e,{name:t=je(t),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},__embind_register_std_string:function(e,r){We(e,{name:r=je(r),fromWireType:function(e){for(var r=P[e>>2],t=new Array(r),n=0;n<r;++n)t[n]=String.fromCharCode(D[e+4+n]);return Tt(e),t.join("")},toWireType:function(e,r){function t(e,r){return e[r]}var n;r instanceof ArrayBuffer&&(r=new Uint8Array(r)),r instanceof Uint8Array?n=t:r instanceof Uint8ClampedArray?n=t:r instanceof Int8Array?n=t:"string"==typeof r?n=function(e,r){return e.charCodeAt(r)}:ze("Cannot pass non-string to std::string");var o=r.length,i=At(4+o);P[i>>2]=o;for(var a=0;a<o;++a){var s=n(r,a);s>255&&(Tt(i),ze("String has UTF-16 code units that do not fit in 8 bits")),D[i+4+a]=s}return null!==e&&e.push(Tt,i),i},argPackAdvance:8,readValueFromPointer:ke,destructorFunction:function(e){Tt(e)}})},__embind_register_std_wstring:function(e,r,t){var n,o;t=je(t),2===r?(n=function(){return S},o=1):4===r&&(n=function(){return P},o=2),We(e,{name:t,fromWireType:function(e){for(var r=n(),t=P[e>>2],i=new Array(t),a=e+4>>o,s=0;s<t;++s)i[s]=String.fromCharCode(r[a+s]);return Tt(e),i.join("")},toWireType:function(e,t){var i=n(),a=t.length,s=At(4+a*r);P[s>>2]=a;for(var u=s+4>>o,c=0;c<a;++c)i[u+c]=t.charCodeAt(c);return null!==e&&e.push(Tt,s),s},argPackAdvance:8,readValueFromPointer:ke,destructorFunction:function(e){Tt(e)}})},__embind_register_value_object:function(e,r,t,n,o,i){Te[e]={name:je(r),rawConstructor:Er(t,n),rawDestructor:Er(o,i),fields:[]}},__embind_register_value_object_field:function(e,r,t,n,o,i,a,s,u,c){Te[e].fields.push({fieldName:je(r),getterReturnType:t,getter:Er(n,o),getterContext:i,setterArgumentType:a,setter:Er(s,u),setterContext:c})},__embind_register_void:function(e,r){We(e,{isVoid:!0,name:r=je(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(e,r){}})},__emval_call_method:function(e,r,t,n,o){var i,a;return(e=Lr[e])(r=function(e){return e||ze("Cannot use deleted val. handle = "+e),Dr[e].value}(r),t=void 0===(a=Ir[i=t])?je(i):a,function(e){var r=[];return N[e>>2]=Pr(r),r}(n),o)},__emval_decref:Or,__emval_get_method_caller:function(e,r){for(var t=function(e,r,t){for(var n=new Array(e),o=0;o<e;++o)n[o]=Fr(N[(r>>2)+o],"parameter "+o);return n}(e,r),n=t[0],o=n.name+"_$"+t.slice(1).map(function(e){return e.name}).join("_")+"$",i=["retType"],a=[n],s="",u=0;u<e-1;++u)s+=(0!==u?", ":"")+"arg"+u,i.push("argType"+u),a.push(t[1+u]);var c="return function "+Ce("methodCaller_"+o)+"(handle, name, destructors, args) {\n",l=0;for(u=0;u<e-1;++u)c+="    var arg"+u+" = argType"+u+".readValueFromPointer(args"+(l?"+"+l:"")+");\n",l+=t[u+1].argPackAdvance;for(c+="    var rv = handle[name]("+s+");\n",u=0;u<e-1;++u)t[u+1].deleteObject&&(c+="    argType"+u+".deleteObject(arg"+u+");\n");n.isVoid||(c+="    return retType.toWireType(destructors, rv);\n"),c+="};\n",i.push(c);var f,d,p=Tr(Function,i).apply(null,a);return f=p,d=Lr.length,Lr.push(f),d},__emval_incref:function(e){e>4&&(Dr[e].refcount+=1)},__emval_run_destructors:function(e){Ae(Dr[e].value),Or(e)},__emval_take_value:function(e,r){return Pr((e=Fr(e,"_emval_take_value")).readValueFromPointer(r))},_abort:function(){o.abort()},_emscripten_asm_const_i:function(e){return ae[e]()},_emscripten_memcpy_big:function(e,r,t){return D.set(D.subarray(r,r+t),e),e},_getenv:function e(r){return 0===r?0:(r=y(r),Rr.hasOwnProperty(r)?(e.ret&&Tt(e.ret),e.ret=(t=Rr[r],n=w(t)+1,(o=At(n))&&g(t,k,o,n),o),e.ret):0);var t,n,o},_llvm_eh_typeid_for:function(e){return e},_llvm_trap:function(){Pt("trap!")},_pthread_cond_signal:function(){return 0},_pthread_cond_wait:function(){return 0},_pthread_getspecific:function(e){return Br[e]||0},_pthread_key_create:function(e,r){return 0==e?de.EINVAL:(N[e>>2]=xr,Br[xr]=0,xr++,0)},_pthread_mutex_destroy:function(){},_pthread_once:function e(r,t){e.seen||(e.seen={}),r in e.seen||(o.dynCall_v(t),e.seen[r]=1)},_pthread_setspecific:function(e,r){return e in Br?(Br[e]=r,0):de.EINVAL},_strftime_l:function(e,r,t,n){return Ur(e,r,t,n)},DYNAMICTOP_PTR:B,STACKTOP:M};var qr=o.asm(o.asmGlobalArg,o.asmLibraryArg,A);o.asm=qr;var Xr,Kr=o.__GLOBAL__I_000101=function(){return o.asm.__GLOBAL__I_000101.apply(null,arguments)},Zr=o.__GLOBAL__sub_I_ATNDeserializationOptions_cpp=function(){return o.asm.__GLOBAL__sub_I_ATNDeserializationOptions_cpp.apply(null,arguments)},Jr=o.__GLOBAL__sub_I_ATNSimulator_cpp=function(){return o.asm.__GLOBAL__sub_I_ATNSimulator_cpp.apply(null,arguments)},Qr=o.__GLOBAL__sub_I_ATNState_cpp=function(){return o.asm.__GLOBAL__sub_I_ATNState_cpp.apply(null,arguments)},et=o.__GLOBAL__sub_I_BrightScriptLexer_cpp=function(){return o.asm.__GLOBAL__sub_I_BrightScriptLexer_cpp.apply(null,arguments)},rt=o.__GLOBAL__sub_I_BrightScriptParser_cpp=function(){return o.asm.__GLOBAL__sub_I_BrightScriptParser_cpp.apply(null,arguments)},tt=o.__GLOBAL__sub_I_BrightscriptFormatVisitor_cpp=function(){return o.asm.__GLOBAL__sub_I_BrightscriptFormatVisitor_cpp.apply(null,arguments)},nt=o.__GLOBAL__sub_I_CommonTokenFactory_cpp=function(){return o.asm.__GLOBAL__sub_I_CommonTokenFactory_cpp.apply(null,arguments)},ot=o.__GLOBAL__sub_I_ConsoleErrorListener_cpp=function(){return o.asm.__GLOBAL__sub_I_ConsoleErrorListener_cpp.apply(null,arguments)},it=o.__GLOBAL__sub_I_IntStream_cpp=function(){return o.asm.__GLOBAL__sub_I_IntStream_cpp.apply(null,arguments)},at=o.__GLOBAL__sub_I_IntervalSet_cpp=function(){return o.asm.__GLOBAL__sub_I_IntervalSet_cpp.apply(null,arguments)},st=o.__GLOBAL__sub_I_Interval_cpp=function(){return o.asm.__GLOBAL__sub_I_Interval_cpp.apply(null,arguments)},ut=o.__GLOBAL__sub_I_ParseTreeWalker_cpp=function(){return o.asm.__GLOBAL__sub_I_ParseTreeWalker_cpp.apply(null,arguments)},ct=o.__GLOBAL__sub_I_ParserATNSimulator_cpp=function(){return o.asm.__GLOBAL__sub_I_ParserATNSimulator_cpp.apply(null,arguments)},lt=o.__GLOBAL__sub_I_ParserRuleContext_cpp=function(){return o.asm.__GLOBAL__sub_I_ParserRuleContext_cpp.apply(null,arguments)},ft=o.__GLOBAL__sub_I_Parser_cpp=function(){return o.asm.__GLOBAL__sub_I_Parser_cpp.apply(null,arguments)},dt=o.__GLOBAL__sub_I_PredictionContext_cpp=function(){return o.asm.__GLOBAL__sub_I_PredictionContext_cpp.apply(null,arguments)},pt=o.__GLOBAL__sub_I_Recognizer_cpp=function(){return o.asm.__GLOBAL__sub_I_Recognizer_cpp.apply(null,arguments)},mt=o.__GLOBAL__sub_I_SemanticContext_cpp=function(){return o.asm.__GLOBAL__sub_I_SemanticContext_cpp.apply(null,arguments)},ht=o.__GLOBAL__sub_I_Transition_cpp=function(){return o.asm.__GLOBAL__sub_I_Transition_cpp.apply(null,arguments)},_t=o.__GLOBAL__sub_I_Vocabulary_cpp=function(){return o.asm.__GLOBAL__sub_I_Vocabulary_cpp.apply(null,arguments)},yt=o.__GLOBAL__sub_I_XPathLexer_cpp=function(){return o.asm.__GLOBAL__sub_I_XPathLexer_cpp.apply(null,arguments)},Et=o.__GLOBAL__sub_I_XPath_cpp=function(){return o.asm.__GLOBAL__sub_I_XPath_cpp.apply(null,arguments)},vt=o.__GLOBAL__sub_I_bind_cpp=function(){return o.asm.__GLOBAL__sub_I_bind_cpp.apply(null,arguments)},gt=o.__GLOBAL__sub_I_iostream_cpp=function(){return o.asm.__GLOBAL__sub_I_iostream_cpp.apply(null,arguments)},wt=o.__GLOBAL__sub_I_main_cpp=function(){return o.asm.__GLOBAL__sub_I_main_cpp.apply(null,arguments)},bt=(o.__Z16parseWithEmitterNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN10emscripten3valE=function(){return o.asm.__Z16parseWithEmitterNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN10emscripten3valE.apply(null,arguments)},o.__Z5parseNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE=function(){return o.asm.__Z5parseNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE.apply(null,arguments)},o.__Z6formatNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE=function(){return o.asm.__Z6formatNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE.apply(null,arguments)},o.___cxa_can_catch=function(){return o.asm.___cxa_can_catch.apply(null,arguments)},o.___cxa_is_pointer_type=function(){return o.asm.___cxa_is_pointer_type.apply(null,arguments)},o.___errno_location=function(){return o.asm.___errno_location.apply(null,arguments)},o.___getTypeName=function(){return o.asm.___getTypeName.apply(null,arguments)}),Tt=o._free=function(){return o.asm._free.apply(null,arguments)},At=(o._main=function(){return o.asm._main.apply(null,arguments)},o._malloc=function(){return o.asm._malloc.apply(null,arguments)}),kt=o.setTempRet0=function(){return o.asm.setTempRet0.apply(null,arguments)},Dt=(o.setThrew=function(){return o.asm.setThrew.apply(null,arguments)},o.stackAlloc=function(){return o.asm.stackAlloc.apply(null,arguments)});o.dynCall_diiiii=function(){return o.asm.dynCall_diiiii.apply(null,arguments)},o.dynCall_i=function(){return o.asm.dynCall_i.apply(null,arguments)},o.dynCall_ii=function(){return o.asm.dynCall_ii.apply(null,arguments)},o.dynCall_iii=function(){return o.asm.dynCall_iii.apply(null,arguments)},o.dynCall_iiii=function(){return o.asm.dynCall_iiii.apply(null,arguments)},o.dynCall_iiiii=function(){return o.asm.dynCall_iiiii.apply(null,arguments)},o.dynCall_iiiiid=function(){return o.asm.dynCall_iiiiid.apply(null,arguments)},o.dynCall_iiiiii=function(){return o.asm.dynCall_iiiiii.apply(null,arguments)},o.dynCall_iiiiiid=function(){return o.asm.dynCall_iiiiiid.apply(null,arguments)},o.dynCall_iiiiiii=function(){return o.asm.dynCall_iiiiiii.apply(null,arguments)},o.dynCall_iiiiiiii=function(){return o.asm.dynCall_iiiiiiii.apply(null,arguments)},o.dynCall_iiiiiiiii=function(){return o.asm.dynCall_iiiiiiiii.apply(null,arguments)},o.dynCall_iiiiiiiiiiii=function(){return o.asm.dynCall_iiiiiiiiiiii.apply(null,arguments)},o.dynCall_iiiiij=function(){return o.asm.dynCall_iiiiij.apply(null,arguments)},o.dynCall_v=function(){return o.asm.dynCall_v.apply(null,arguments)},o.dynCall_vi=function(){return o.asm.dynCall_vi.apply(null,arguments)},o.dynCall_vii=function(){return o.asm.dynCall_vii.apply(null,arguments)},o.dynCall_viii=function(){return o.asm.dynCall_viii.apply(null,arguments)},o.dynCall_viiii=function(){return o.asm.dynCall_viiii.apply(null,arguments)},o.dynCall_viiiii=function(){return o.asm.dynCall_viiiii.apply(null,arguments)},o.dynCall_viiiiii=function(){return o.asm.dynCall_viiiiii.apply(null,arguments)},o.dynCall_viiiiiii=function(){return o.asm.dynCall_viiiiiii.apply(null,arguments)},o.dynCall_viiiiiiii=function(){return o.asm.dynCall_viiiiiiii.apply(null,arguments)},o.dynCall_viiiiiiiii=function(){return o.asm.dynCall_viiiiiiiii.apply(null,arguments)},o.dynCall_viiiiiiiiii=function(){return o.asm.dynCall_viiiiiiiiii.apply(null,arguments)},o.dynCall_viiiiiiiiiiiiiii=function(){return o.asm.dynCall_viiiiiiiiiiiiiii.apply(null,arguments)},o.dynCall_viijii=function(){return o.asm.dynCall_viijii.apply(null,arguments)};function Ot(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}o.asm=qr,Ot.prototype=new Error,Ot.prototype.constructor=Ot;function St(e){function r(){o.calledRun||(o.calledRun=!0,h||(Z(),U(H),o.onRuntimeInitialized&&o.onRuntimeInitialized(),o._main&&Ct&&o.callMain(e),function(){if(o.postRun)for("function"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;)e=o.postRun.shift(),X.unshift(e);var e;U(X)}()))}e=e||o.arguments,Q>0||(!function(){if(o.preRun)for("function"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)e=o.preRun.shift(),V.unshift(e);var e;U(V)}(),Q>0||o.calledRun||(o.setStatus?(o.setStatus("Running..."),setTimeout(function(){setTimeout(function(){o.setStatus("")},1),r()},1)):r()))}function Nt(e,r){r&&o.noExitRuntime&&0===e||(o.noExitRuntime||(h=!0,e,M=Xr,U(q),!0,o.onExit&&o.onExit(e)),l&&process.exit(e),o.quit(e,new Ot(e)))}function Pt(e){throw o.onAbort&&o.onAbort(e),void 0!==e?(o.print(e),o.printErr(e),e=JSON.stringify(e)):e="",h=!0,1,"abort("+e+"). Build with -s ASSERTIONS=1 for more info."}if(re=function e(){o.calledRun||St(),o.calledRun||(re=e)},o.callMain=function(e){e=e||[],Z();var r=e.length+1,t=Dt(4*(r+1));N[t>>2]=b(o.thisProgram);for(var n=1;n<r;n++)N[(t>>2)+n]=b(e[n-1]);N[(t>>2)+r]=0;try{Nt(o._main(r,t,0),!0)}catch(e){if(e instanceof Ot)return;if("SimulateInfiniteLoop"==e)return void(o.noExitRuntime=!0);var i=e;e&&"object"==typeof e&&e.stack&&(i=[e,e.stack]),o.printErr("exception thrown: "+i),o.quit(1,e)}finally{!0}},o.run=St,o.exit=Nt,o.abort=Pt,o.preInit)for("function"==typeof o.preInit&&(o.preInit=[o.preInit]);o.preInit.length>0;)o.preInit.pop()();var Ct=!0;o.noInitialRun&&(Ct=!1),o.noExitRuntime=!0,St()},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(3),o=function(){function e(){}return e.prototype.enterFunctionDeclaration=function(e){console.log(e)},e}();n.onRuntimeInitialized=function(){new o;var e=n.format('\n    \' This is a sample file containing syntax that compiles properly\n\n    #const debug = true\n    \n    REM Although the file compiles,\n    REM\n    REM Not all linting rules pass\n    \n    sub DefaultMain()\n        #if debug = true\n        print "debug mode enabled"\n        #else\n        print "debug mode disabled"\n        #end if\n        \n        print "in showChannelSGScreen"\n    \n        \'Indicate this is a Roku SceneGraph application\'\n        screen = CreateObject("roSGScreen")\n        m.port = CreateObject("roMessagePort")\n        screen.setMessagePort(m.port)\n    \n        \'Create a scene and load /components/sampleproject.xml\'\n        scene = screen.CreateScene("SampleProject")\n        screen.show()\n    \n        stop\n    \n        ? "some thing";"other thing"\n    \n        a = ["foo", "bar", "baz"]\n    \n        b = [\n            "foo"\n            "bar"\n            "baz"\n        ]\n    \n        c = {\n            "foo": 1,\n            "bar": 2,\n            "baz": 3\n        }\n    \n        c = {\n            "foo": 1\n            "bar": 2\n            "baz": 3\n        }\n    \n    \n        Run("pkg:/source/Missing.brs")\n    \n        Eval("d = 1")\n    \n        while(true)\n            msg = wait(0, m.port)\n            msgType = type(msg)\n            if msgType = "roSGScreenEvent"\n                if msg.isScreenClosed() then return\n            end if\n        end while\n    \n        \' Statement for early exit the application\n        end\n    \n    end sub\n    \n    function SomeFunc() as void\n        a = "foo"\n        b = "bar"\n    \n        return\n    end function    \n    ');console.log(e)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,